From e68532427b4209e797382997f65f1b8ed6c2cdd1 Mon Sep 17 00:00:00 2001
From: Lanttor Guo <lanttor.guo@freescale.com>
Date: Tue, 27 Oct 2009 17:57:03 +0800
Subject: [PATCH] Kernel 2.6.25 memory performance enhancement on CFV4E platform

This patch is to improve the memory performance on Coldfire v4e platform.
This patch is applied for m547x_8x_evb_20080811-final-ltib.iso release, and
has been tested on mcf5475evb/mcf5485evb board.

Signed-off-by: Lanttor Guo <lanttor.guo@freescale.com>
---
 arch/m68k/Kconfig             |   20 +++++++++++++++
 arch/m68k/coldfire/config.c   |   28 ++++++++++++++++++++-
 arch/m68k/coldfire/head.S     |   48 ++++++++++++++++++++++++++++++++----
 arch/m68k/coldfire/signal.c   |   23 ++++++++++++++---
 arch/m68k/mm/cf-mmu.c         |   30 +++++++++++++---------
 include/asm-m68k/cf_pgalloc.h |   17 ++++++++++--
 include/asm-m68k/dma.h        |   15 +++++++++++
 include/asm-m68k/page.h       |   54 ++++++++++++++++++++++++++++++++++++++++-
 include/asm-m68k/processor.h  |   13 +++++++--
 9 files changed, 219 insertions(+), 29 deletions(-)

diff --git a/arch/m68k/Kconfig b/arch/m68k/Kconfig
index 44702cb..aabe635 100644
--- a/arch/m68k/Kconfig
+++ b/arch/m68k/Kconfig
@@ -1,3 +1,12 @@
+# linux/arch/m68k/Kconfig
+
+# Copyright (C) 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+
 #
 # For a description of the syntax of this configuration file,
 # see Documentation/kbuild/kconfig-language.txt.
@@ -461,6 +470,17 @@ config NOR_FLASH_BASE
 	default 0x00000000 if M54455EVB
 	default 0xE0000000 if M547X_8X
 
+config DMA_BASE
+        hex
+        depends on COLDFIRE
+        default 0xef000000
+
+config DMA_SIZE
+        hex
+        depends on COLDFIRE
+        default 0x1000000 if M5445X
+        default 0x800000 if M547X_8X
+
 config M68KFPU_EMU
 	bool "Math emulation support (EXPERIMENTAL)"
 	depends on EXPERIMENTAL
diff --git a/arch/m68k/coldfire/config.c b/arch/m68k/coldfire/config.c
index b310178..9d29153 100644
--- a/arch/m68k/coldfire/config.c
+++ b/arch/m68k/coldfire/config.c
@@ -3,7 +3,7 @@
  *
  *  Kurt Mahan kmahan@freescale.com
  *  Matt Waddel Matt.Waddel@freescale.com
- *  Copyright Freescale Semiconductor, Inc. 2007, 2008
+ *  Copyright (C) 2007-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -64,6 +64,11 @@ extern unsigned long availmem;
 static int irq_enable[NR_IRQS];
 unsigned long num_pages;
 
+/* cf dma physical addresses */
+unsigned long cf_dma_base;
+unsigned long cf_dma_end;
+unsigned long cf_dma_size;
+
 /* ethernet mac addresses from uboot */
 unsigned char uboot_enet0[6];
 unsigned char uboot_enet1[6];
@@ -421,7 +426,28 @@ coldfire_bootmem_alloc(unsigned long memory_start, unsigned long memory_end)
 	availmem += init_bootmem_node(NODE_DATA(0), min_low_pfn,
 		base_pfn, max_low_pfn);
 	availmem = PAGE_ALIGN(availmem);
+
+        printk(KERN_INFO "** availmem=0x%lx  pa(am)=0x%lx\n",
+                        availmem, __pa(availmem));
+        printk(KERN_INFO "** mstart=0x%lx  mend=0x%lx\n",
+                        memory_start, memory_end);
+        printk(KERN_INFO "bpfn=0x%lx minpfn=0x%lx maxpfn=0x%lx\n",
+                        base_pfn, min_low_pfn, max_low_pfn);
+
 	free_bootmem(__pa(availmem), memory_end - (availmem));
+
+        /* configure physical dma area */
+        cf_dma_base = __pa(PAGE_ALIGN(memory_start));
+        cf_dma_size = CONFIG_DMA_SIZE;
+        cf_dma_end = CONFIG_SDRAM_BASE + cf_dma_size - 1;
+
+        printk(KERN_INFO "dma: phys base=0x%lx  phys end=0x%lx"
+	       "  virt base=0x%x\n",
+               cf_dma_base, cf_dma_end, CONFIG_DMA_BASE);
+
+        printk(KERN_INFO "mdma=0x%x  pa(mdma)=0x%lx\n",
+                        MAX_DMA_ADDRESS, __pa(MAX_DMA_ADDRESS));
+
 }
 
 void __init config_coldfire(void)
diff --git a/arch/m68k/coldfire/head.S b/arch/m68k/coldfire/head.S
index 81a1d0d..11bd498 100644
--- a/arch/m68k/coldfire/head.S
+++ b/arch/m68k/coldfire/head.S
@@ -4,7 +4,11 @@
  *  Ported to ColdFire by
  *    Matt Waddel Matt.Waddel@freescale.com
  *    Kurt Mahan kmahan@freescale.com
- *  Copyright Freescale Semiconductor, Inc. 2007, 2008
+ *
+ *  Create DMA memory area (no cache) by
+ *    Lanttor.Guo@freescale.com
+ *
+ *  Copyright (C) 2007-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *  Phys kernel mapping Copyright Daniel Krueger, SYSTEC electornic GmbH 2008
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -104,9 +108,9 @@
 #define ACR3_DEFAULT	#0x400FA008   /* SDRAM cached */
 #elif defined(CONFIG_M547X_8X)
 #define ACR0_DEFAULT	#0xF00FA048   /* System Regs */
-#define ACR1_DEFAULT	#0x000FA048   /* SDRAM uncached */
+#define ACR1_DEFAULT	#0x000FA028   /* SDRAM data chache copy-back */
 #define ACR2_DEFAULT	#0x00000000   /* Not mapped */
-#define ACR3_DEFAULT	#0x000FA008   /* SDRAM cached */
+#define ACR3_DEFAULT	#0x000FA028   /* SDRAM code cache copy-back */
 #endif
 #endif
 
@@ -186,7 +190,6 @@ func_define	putn,1
 #endif
 .endm
 
-#if CONFIG_SDRAM_BASE != PAGE_OFFSET
 /*
 	mmu_map  -  creates a new TLB entry
 
@@ -256,7 +259,6 @@ func_define	putn,1
 	movew	\temp_data_reg, (MMUOR)
 1:	
 .endm	/* mmu_unmap */
-#endif /* CONFIG_SDRAM_BASE != PAGE_OFFSET */
 
 /* .text */
 .section ".text.head","ax"
@@ -546,6 +548,42 @@ ENTRY(__start)
 #endif
 #endif /* CONFIG_SDRAM_BASE != PAGE_OFFSET */
 
+/* create dma memory mirror TLB mapping */
+#if defined(CONFIG_M547X_8X)
+	mmu_map (CONFIG_DMA_BASE + 0*1024*1024), \
+		(CONFIG_SDRAM_BASE + 0*1024*1024), 0, 0, \
+		MMUTR_SG, MMUDR_SZ1M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, \
+		MMUDR_W, 0, MMUDR_LK, %d0
+	mmu_map (CONFIG_DMA_BASE + 1*1024*1024), \
+		(CONFIG_SDRAM_BASE + 1*1024*1024), 0, 0, \
+		MMUTR_SG, MMUDR_SZ1M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, \
+		MMUDR_W, 0, MMUDR_LK, %d0
+	mmu_map (CONFIG_DMA_BASE + 2*1024*1024), \
+		(CONFIG_SDRAM_BASE + 2*1024*1024), 0, 0, \
+		MMUTR_SG, MMUDR_SZ1M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, \
+		MMUDR_W, 0, MMUDR_LK, %d0
+	mmu_map (CONFIG_DMA_BASE + 3*1024*1024), \
+		(CONFIG_SDRAM_BASE + 3*1024*1024), 0, 0, \
+		MMUTR_SG, MMUDR_SZ1M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, \
+		MMUDR_W, 0, MMUDR_LK, %d0
+	mmu_map (CONFIG_DMA_BASE + 4*1024*1024), \
+		(CONFIG_SDRAM_BASE + 4*1024*1024), 0, 0, \
+		MMUTR_SG, MMUDR_SZ1M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, \
+		MMUDR_W, 0, MMUDR_LK, %d0
+	mmu_map (CONFIG_DMA_BASE + 5*1024*1024), \
+		(CONFIG_SDRAM_BASE + 5*1024*1024), 0, 0, \
+		MMUTR_SG, MMUDR_SZ1M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, \
+		MMUDR_W, 0, MMUDR_LK, %d0
+	mmu_map (CONFIG_DMA_BASE + 6*1024*1024), \
+		(CONFIG_SDRAM_BASE + 6*1024*1024), 0, 0, \
+		MMUTR_SG, MMUDR_SZ1M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, \
+		MMUDR_W, 0, MMUDR_LK, %d0
+	mmu_map (CONFIG_DMA_BASE + 7*1024*1024), \
+		(CONFIG_SDRAM_BASE + 7*1024*1024), 0, 0, \
+		MMUTR_SG, MMUDR_SZ1M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, \
+		MMUDR_W, 0, MMUDR_LK, %d0
+#endif
+
 	/* Turn on MMU */
 	movel	#(MMUCR_EN),%a0
 	movel	%a0,MMUCR
diff --git a/arch/m68k/coldfire/signal.c b/arch/m68k/coldfire/signal.c
index 38671c4..269f2b3 100644
--- a/arch/m68k/coldfire/signal.c
+++ b/arch/m68k/coldfire/signal.c
@@ -14,7 +14,12 @@
  *
  * Coldfire support by:
  * Matt Waddel Matt.Waddel@freescale.com
- * Copyright Freescale Semiconductor, Inc 2007
+ * Copyright (C) 2007-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
  */
 
 #include <linux/sched.h>
@@ -608,9 +613,19 @@ static inline int rt_setup_ucontext(struct ucontext __user *uc,
 
 static inline void push_cache(unsigned long vaddr)
 {
-#if 0 
-// JKM -- need to add into the old cpushl cache stuff
-	cf_cache_push(__pa(vaddr), 8);
+#ifdef CONFIG_M5445X
+        pgd_t *pdir;
+        pmd_t *pmdp;
+        pte_t *ptep;
+        unsigned long paddr;
+
+        pdir = pgd_offset(current->mm, vaddr);
+        pmdp = pmd_offset(pdir, vaddr);
+        ptep = pte_offset_map(pmdp, vaddr);
+        paddr = ((pte_val(*ptep) & PAGE_MASK) | (vaddr & ~PAGE_MASK));
+        cf_icache_flush_range(paddr, paddr + 8);
+#elif CONFIG_M547X_8X
+        flush_icache_range(vaddr, vaddr + 8);
 #endif
 }
 
diff --git a/arch/m68k/mm/cf-mmu.c b/arch/m68k/mm/cf-mmu.c
index a067d15..ab3ff8f 100644
--- a/arch/m68k/mm/cf-mmu.c
+++ b/arch/m68k/mm/cf-mmu.c
@@ -6,7 +6,15 @@
  *
  * Implementations of mm routines specific to the Coldfire MMU.
  *
- * Copyright (c) 2008 Freescale Semiconductor, Inc.
+ * Add GPL V2 license and modify memory zone setting by
+ *  Lanttor.Guo@freescale.com
+ *
+ * Copyright (C) 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
  */
 
 #include <linux/signal.h>
@@ -121,21 +129,19 @@ void __init paging_init(void)
 		}
 	}
 	
-	current->mm = NULL;
+        current->mm = NULL;
 
-	/* clear zones */
-	for (zone = 0; zone < MAX_NR_ZONES; zone++)
-		zones_size[zone] = 0x0;
+        /* clear zones */
+        for (zone = 0; zone < MAX_NR_ZONES; zone++)
+                zones_size[zone] = 0x0;
 
-	/* allocate the bottom 32M (0x40x 0x41x) to DMA - head.S marks them NO CACHE */
-	/* JKM - this should be changed to allocate from the TOP (0x4f,0x4e) but the
-	 * allocator is being a bit challenging */
-        zones_size[ZONE_DMA] = (32*1024*1024) >> PAGE_SHIFT;
+        zones_size[ZONE_DMA] = CONFIG_DMA_SIZE >> PAGE_SHIFT;
+        zones_size[ZONE_NORMAL] = (((unsigned long)high_memory -
+                                    PAGE_OFFSET) >> PAGE_SHIFT) -
+                                   zones_size[ZONE_DMA];
 
-	/* allocate the rest to NORMAL - head.S marks them CACHE */
-	zones_size[ZONE_NORMAL] = (((unsigned long)high_memory - PAGE_OFFSET) >> PAGE_SHIFT) - zones_size[0];
+        free_area_init(zones_size);
 
-	free_area_init(zones_size);
 }
 
 
diff --git a/include/asm-m68k/cf_pgalloc.h b/include/asm-m68k/cf_pgalloc.h
index 535ddc1..dce1309 100644
--- a/include/asm-m68k/cf_pgalloc.h
+++ b/include/asm-m68k/cf_pgalloc.h
@@ -1,3 +1,14 @@
+/*
+ *  linux/include/asm-m68k/cf_pgalloc.h
+ *
+ *  Copyright (C) 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ */
+
 #ifndef M68K_CF_PGALLOC_H
 #define M68K_CF_PGALLOC_H
 
@@ -16,7 +27,7 @@ extern const char bad_pmd_string[];
 extern inline pte_t *pte_alloc_one_kernel(struct mm_struct *mm,
 	unsigned long address)
 {
-	unsigned long page = __get_free_page(GFP_DMA|__GFP_REPEAT);
+	unsigned long page = __get_free_page(GFP_KERNEL|__GFP_REPEAT);
 
 	if (!page)
 		return NULL;
@@ -52,7 +63,7 @@ static inline void __pte_free_tlb(struct mmu_gather *tlb, struct page *page)
 static inline struct page *pte_alloc_one(struct mm_struct *mm,
 	unsigned long address)
 {
-	struct page *page = alloc_pages(GFP_DMA|__GFP_REPEAT, 0);
+	struct page *page = alloc_pages(GFP_KERNEL|__GFP_REPEAT, 0);
 	pte_t *pte;
 
 	if (!page)
@@ -90,7 +101,7 @@ extern inline pgd_t *pgd_alloc(struct mm_struct *mm)
 {
      pgd_t *new_pgd;
 
-     new_pgd = (pgd_t *)__get_free_page(GFP_DMA | __GFP_NOWARN);
+     new_pgd = (pgd_t *)__get_free_page(GFP_KERNEL | __GFP_NOWARN);
      if (!new_pgd)
 	     return NULL;
      memcpy(new_pgd, swapper_pg_dir, PAGE_SIZE);
diff --git a/include/asm-m68k/dma.h b/include/asm-m68k/dma.h
index 0338234..e4a96d5 100644
--- a/include/asm-m68k/dma.h
+++ b/include/asm-m68k/dma.h
@@ -1,9 +1,24 @@
+/*
+ *  linux/include/asm-m68k/dma.h
+ *
+ *  Copyright (C) 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ */
+
 #ifndef _M68K_DMA_H
 #define _M68K_DMA_H 1
 
 /* it's useless on the m68k, but unfortunately needed by the new
    bootmem allocator (but this should do it for this) */
+#if defined(CONFIG_M5445X) || defined(CONFIG_M547X_8X)
+#define MAX_DMA_ADDRESS 0xefffffff
+#else
 #define MAX_DMA_ADDRESS PAGE_OFFSET
+#endif
 
 #ifndef CONFIG_COLDFIRE
 #define MAX_DMA_CHANNELS 8
diff --git a/include/asm-m68k/page.h b/include/asm-m68k/page.h
index 00dda52..0fcbee5 100644
--- a/include/asm-m68k/page.h
+++ b/include/asm-m68k/page.h
@@ -1,3 +1,16 @@
+/*
+ *  linux/include/asm-m68k/page.h
+ *
+ *  Fix up __pa() and __va() implementation on cfv4e platform by
+ *   Jason.Jin@freescale.com
+ *  Copyright (C) 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ */
+
 #ifndef _M68K_PAGE_H
 #define _M68K_PAGE_H
 
@@ -121,21 +134,51 @@ extern unsigned long m68k_memoffset;
 #define WANT_PAGE_VIRTUAL
 
 #if defined(CONFIG_COLDFIRE)
+
+extern unsigned long cf_dma_base;
+extern unsigned long cf_dma_end;
+
 static inline unsigned long ___pa(void *vaddr)
 {
 #if CONFIG_SDRAM_BASE != PAGE_OFFSET
 	return (((unsigned long)vaddr & 0x0fffffff) + CONFIG_SDRAM_BASE);
 #else
+	if ((unsigned long)vaddr >= CONFIG_DMA_BASE &&
+	    (unsigned long)vaddr < (CONFIG_DMA_BASE + CONFIG_DMA_SIZE)) {
+		/* address is in carved out DMA range */
+		return ((unsigned long)vaddr - CONFIG_DMA_BASE)
+			+ CONFIG_SDRAM_BASE;
+        }
+	else if ((unsigned long)vaddr >= PAGE_OFFSET &&
+		 (unsigned long)vaddr < (PAGE_OFFSET + CONFIG_SDRAM_SIZE)) {
+		/* normal mapping */
+		return ((unsigned long)vaddr - PAGE_OFFSET)
+			+ CONFIG_SDRAM_BASE;
+	}
+
 	return (unsigned long)vaddr;
 #endif
 }
-#define __pa(vaddr)	___pa((void *)(vaddr))
+#define __pa(vaddr)     ___pa((void *)(vaddr))
 
+/*
+ * Convert a phys to a virt
+ */
 static inline void *__va(unsigned long paddr)
 {
 #if CONFIG_SDRAM_BASE != PAGE_OFFSET
 	return (void *)((paddr & 0x0fffffff) + PAGE_OFFSET);
 #else
+	if (paddr >= cf_dma_base && paddr <= cf_dma_end) {
+		/* mapped address for DMA */
+		return (void *)((paddr - CONFIG_SDRAM_BASE)
+			+ CONFIG_DMA_BASE);
+	}
+	else if (paddr >= cf_dma_end &&
+		 paddr < (CONFIG_SDRAM_BASE + CONFIG_SDRAM_SIZE)) {
+		/* normal mapping */
+		return (void *)((paddr - CONFIG_SDRAM_BASE) + PAGE_OFFSET);
+	}
 	return (void *)paddr;
 #endif
 }
@@ -242,7 +285,16 @@ static inline __attribute_const__ int __virt_to_node_shift(void)
 	((__p) - pgdat->node_mem_map) + pgdat->node_start_pfn;		\
 })
 
+#ifdef CONFIG_COLDFIRE
+#define virt_addr_valid(kaddr)  ( ((void *)(kaddr) >= (void *)PAGE_OFFSET && \
+                                (void *)(kaddr) < high_memory) || \
+                                ((void *)(kaddr) >= (void*)CONFIG_DMA_BASE && \
+                                (void *)(kaddr) < (void*)(CONFIG_DMA_BASE+CONFIG_DMA_SIZE)))
+
+#else
 #define virt_addr_valid(kaddr)	((void *)(kaddr) >= (void *)PAGE_OFFSET && (void *)(kaddr) < high_memory)
+#endif
+
 #define pfn_valid(pfn)		virt_addr_valid(pfn_to_virt(pfn))
 
 #endif /* __ASSEMBLY__ */
diff --git a/include/asm-m68k/processor.h b/include/asm-m68k/processor.h
index b69cea3..6e34fb6 100644
--- a/include/asm-m68k/processor.h
+++ b/include/asm-m68k/processor.h
@@ -1,7 +1,14 @@
 /*
- * include/asm-m68k/processor.h
+ *  include/asm-m68k/processor.h
  *
- * Copyright (C) 1995 Hamish Macdonald
+ *  Copyright (C) 1995 Hamish Macdonald
+ *
+ *  Copyright (C) 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
  */
 
 #ifndef __ASM_M68K_PROCESSOR_H
@@ -66,7 +73,7 @@ static inline void wrusp(unsigned long usp)
 #if !defined(CONFIG_SUN3) && !defined(CONFIG_COLDFIRE)
 #define TASK_UNMAPPED_BASE     0xC0000000UL
 #elif defined(CONFIG_COLDFIRE)
-#define TASK_UNMAPPED_BASE     0x80000000UL
+#define TASK_UNMAPPED_BASE     0x50000000UL
 #else /* CONFIG_SUN3 */
 #define TASK_UNMAPPED_BASE	0x0A000000UL
 #endif
-- 
1.6.3.2

