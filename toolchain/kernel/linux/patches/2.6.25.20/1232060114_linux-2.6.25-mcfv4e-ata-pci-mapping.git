From d7bffa4da4d332ebdf5e2c232b66baa7a1a337f8 Mon Sep 17 00:00:00 2001
From: Kurt Mahan <kmahan@freescale.com>
Date: Thu, 15 Jan 2009 15:55:14 -0700
Subject: [PATCH] coldfire: Mapping ATA and PCI space via TLBs.

Signed-off-by: Kurt Mahan <kmahan@freescale.com>
---
 arch/m68k/coldfire/head.S |   60 ++++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 59 insertions(+), 1 deletions(-)

diff --git a/arch/m68k/coldfire/head.S b/arch/m68k/coldfire/head.S
index 4a1662c..165ef28 100644
--- a/arch/m68k/coldfire/head.S
+++ b/arch/m68k/coldfire/head.S
@@ -4,7 +4,7 @@
  *  Ported to ColdFire by
  *    Matt Waddel Matt.Waddel@freescale.com
  *    Kurt Mahan kmahan@freescale.com
- *  Copyright Freescale Semiconductor, Inc. 2007, 2008
+ *  Copyright Freescale Semiconductor, Inc. 2007, 2008, 2009
  *  Phys kernel mapping Copyright Daniel Krueger, SYSTEC electornic GmbH 2008
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -545,6 +545,64 @@ ENTRY(__start)
 #endif
 #endif /* CONFIG_SDRAM_BASE != PAGE_OFFSET */
 
+#if defined(CONFIG_PATA_FSL) || defined(CONFIG_PATA_FSL_MODULE)
+	/* map in ATA registers */
+	mmu_map (0x90000000), (0x90000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+#endif
+
+#if defined(CONFIG_PCI)
+	mmu_map (0xA0000000 + 0*0x1000000), (0xA0000000 + 0*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 1*0x1000000), (0xA0000000 + 1*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 2*0x1000000), (0xA0000000 + 2*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 3*0x1000000), (0xA0000000 + 3*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 4*0x1000000), (0xA0000000 + 4*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 5*0x1000000), (0xA0000000 + 5*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 6*0x1000000), (0xA0000000 + 6*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 7*0x1000000), (0xA0000000 + 7*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 8*0x1000000), (0xA0000000 + 8*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 9*0x1000000), (0xA0000000 + 9*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 10*0x1000000), (0xA0000000 + 10*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 11*0x1000000), (0xA0000000 + 11*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 12*0x1000000), (0xA0000000 + 12*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 13*0x1000000), (0xA0000000 + 13*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 14*0x1000000), (0xA0000000 + 14*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+	mmu_map (0xA0000000 + 15*0x1000000), (0xA0000000 + 15*0x1000000), 0, 0, \
+		MMUTR_SG, MMUDR_SZ16M, MMUDR_DNCP, MMUDR_SP, MMUDR_R, MMUDR_W, \
+		0, MMUDR_LK, %d0
+#endif
+
 	/* Turn on MMU */
 	movel	#(MMUCR_EN),%a0
 	movel	%a0,MMUCR
-- 
1.6.0.1

