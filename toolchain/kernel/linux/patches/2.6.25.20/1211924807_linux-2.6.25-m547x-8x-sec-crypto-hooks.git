From d6a8c71f8e29ef48998c389ff31db7accd9dc50b Mon Sep 17 00:00:00 2001
From: Kurt Mahan <kmahan@freescale.com>
Date: Tue, 27 May 2008 15:46:47 -0600
Subject: [PATCH] Add cryto driver hooks for the SEC1.1 security engine.

LTIBName: m547x-8x-sec-crypto-hooks
Signed-off-by: Kurt Mahan <kmahan@freescale.com>
Signed-off-by: Shrek Wu <b16972@freescale.com>
---
 crypto/Kconfig         |    1 -
 crypto/aes_generic.c   |  164 +++++++++++++++++++++++++++-
 crypto/algapi.c        |   32 ++++++
 crypto/arc4.c          |  149 ++++++++++++++++++++++++-
 crypto/cbc.c           |  111 ++++++++++++++++++-
 crypto/des_generic.c   |  285 +++++++++++++++++++++++++++++++++++++++++++++---
 crypto/ecb.c           |   92 +++++++++++++++-
 include/crypto/aes.h   |    3 +
 include/linux/crypto.h |   37 ++++++
 9 files changed, 847 insertions(+), 27 deletions(-)

diff --git a/crypto/Kconfig b/crypto/Kconfig
index 69f1be6..6baaeb5 100644
--- a/crypto/Kconfig
+++ b/crypto/Kconfig
@@ -565,7 +565,6 @@ config CRYPTO_CAMELLIA
 
 config CRYPTO_TEST
 	tristate "Testing module"
-	depends on m
 	select CRYPTO_ALGAPI
 	select CRYPTO_AEAD
 	select CRYPTO_BLKCIPHER
diff --git a/crypto/aes_generic.c b/crypto/aes_generic.c
index cf30af7..336ada7 100644
--- a/crypto/aes_generic.c
+++ b/crypto/aes_generic.c
@@ -55,6 +55,41 @@
 #include <linux/crypto.h>
 #include <asm/byteorder.h>
 
+#ifdef CONFIG_COLDFIRE_SEC
+#include <linux/dma-mapping.h>
+#include <asm/m5485sec.h>
+#include "internal.h"
+
+static int
+aes_sec_ecb_encrypt(struct crypto_tfm *tfm,
+		unsigned char *iv,
+		unsigned int nbytes);
+static int
+aes_sec_ecb_decrypt(struct crypto_tfm *tfm,
+		unsigned char *iv,
+		unsigned int nbytes);
+static int
+aes_sec_ecb_crypt(struct crypto_tfm *tfm,
+		unsigned char *iv,
+		unsigned int nbytes);
+static void
+aes_sec_ecb_init(struct crypto_tfm *tfm);
+static int
+aes_sec_cbc_encrypt(struct crypto_tfm *tfm,
+		unsigned char *iv,
+		unsigned int nbytes);
+static int
+aes_sec_cbc_decrypt(struct crypto_tfm *tfm,
+		unsigned char *iv,
+		unsigned int nbytes);
+static int
+aes_sec_cbc_crypt(struct crypto_tfm *tfm,
+		unsigned char *iv,
+		unsigned int nbytes);
+static void
+aes_sec_cbc_init(struct crypto_tfm *tfm);
+#endif /* CONFIG_COLDFIRE_SEC */
+
 static inline u8 byte(const u32 x, const unsigned n)
 {
 	return x >> (n << 3);
@@ -243,7 +278,9 @@ int crypto_aes_set_key(struct crypto_tfm *tfm, const u8 *in_key,
 	}
 
 	ctx->key_length = key_len;
-
+#ifdef CONFIG_COLDFIRE_SEC
+	memcpy(((struct crypto_aes_ctx *)ctx)->key, in_key, key_len);
+#endif /* CONFIG_COLDFIRE_SEC */
 	ctx->key_dec[key_len + 24] = ctx->key_enc[0] = le32_to_cpu(key[0]);
 	ctx->key_dec[key_len + 25] = ctx->key_enc[1] = le32_to_cpu(key[1]);
 	ctx->key_dec[key_len + 26] = ctx->key_enc[2] = le32_to_cpu(key[2]);
@@ -317,6 +354,121 @@ EXPORT_SYMBOL_GPL(crypto_aes_set_key);
 	f_rl(bo, bi, 3, k);	\
 } while (0)
 
+#ifdef CONFIG_COLDFIRE_SEC
+static int
+aes_sec_ecb_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_ENCR_AESU_ECB;
+	return aes_sec_ecb_crypt(tfm, iv, nbytes);
+}
+
+static int
+aes_sec_ecb_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_DECR_AESU_ECB;
+	return aes_sec_ecb_crypt(tfm, iv, nbytes);
+}
+
+static int
+aes_sec_ecb_crypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_data_in_len =
+		sec_desc->secdesc_data_out_len = nbytes;
+	sec_nonblock_execute(sec_desc);
+	return 0;
+}
+
+static void aes_sec_ecb_init(struct crypto_tfm *tfm)
+{
+	int keylen = ((struct crypto_aes_ctx *)crypto_tfm_ctx(tfm))->key_length;
+	if (keylen != 16 && keylen != 24 && keylen != 32) {
+		printk(KERN_DEBUG "%s: we do not support the key length %d \n",
+		__func__, keylen);
+		return;
+	}
+	memset(sec_desc, 0, sizeof(struct sec_descriptor));
+
+	sec_desc->secdesc_key_len = keylen;
+	sec_desc->secdesc_key_ptr =
+		(unsigned char *)dma_map_single(NULL, secdata->secdev_key,
+				SEC_DEV_KEY_LEN, DMA_TO_DEVICE);
+	sec_desc->secdesc_data_in_ptr =
+		(unsigned char *)dma_map_single(NULL, secdata->secdev_inbuf,
+				SEC_DEV_BUF, DMA_TO_DEVICE);
+	sec_desc->secdesc_data_out_ptr =
+		(unsigned char *)dma_map_single(NULL, secdata->secdev_outbuf,
+			SEC_DEV_BUF, DMA_TO_DEVICE);
+	memcpy(secdata->secdev_key,
+		((struct crypto_aes_ctx *)crypto_tfm_ctx(tfm))->key, keylen);
+}
+
+static int
+aes_sec_cbc_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_ENCR_AESU_CBC;
+	return aes_sec_cbc_crypt(tfm, iv, nbytes);
+}
+
+static int
+aes_sec_cbc_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_DECR_AESU_CBC;
+	return aes_sec_cbc_crypt(tfm, iv, nbytes);
+}
+
+static int
+aes_sec_cbc_crypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	int bsize = 56;
+	sec_desc->secdesc_data_in_len =
+		sec_desc->secdesc_data_out_len = nbytes;
+	memcpy(secdata->secdev_iv, iv, bsize);
+	sec_nonblock_execute(sec_desc);
+	memcpy(iv, secdata->secdev_ov, bsize);
+	return 0;
+}
+
+static void aes_sec_cbc_init(struct crypto_tfm *tfm)
+{
+	int keylen = ((struct crypto_aes_ctx *)crypto_tfm_ctx(tfm))->key_length;
+	int bsize = crypto_tfm_alg_blocksize(tfm);
+	if (keylen != 16 && keylen != 24 && keylen != 32) {
+		printk(KERN_DEBUG "%s: we do not support "
+			"the key length %d \n", __func__, keylen);
+		return;
+	}
+
+	memset(sec_desc, 0, sizeof(struct sec_descriptor));
+
+	sec_desc->secdesc_key_len = keylen;
+	sec_desc->secdesc_key_ptr =
+		(unsigned char *)dma_map_single(NULL, secdata->secdev_key,
+			SEC_DEV_KEY_LEN, DMA_TO_DEVICE);
+	sec_desc->secdesc_data_in_ptr =
+		(unsigned char *)dma_map_single(NULL, secdata->secdev_inbuf,
+			SEC_DEV_BUF, DMA_TO_DEVICE);
+	sec_desc->secdesc_data_out_ptr =
+		(unsigned char *)dma_map_single(NULL, secdata->secdev_outbuf,
+			SEC_DEV_BUF, DMA_TO_DEVICE);
+	sec_desc->secdesc_iv_out_len = sec_desc->secdesc_iv_in_len = bsize;
+	sec_desc->secdesc_iv_in_ptr =
+		(unsigned char *)dma_map_single(NULL, secdata->secdev_iv,
+			SEC_DEV_VECTOR_LEN, DMA_TO_DEVICE);
+	sec_desc->secdesc_iv_out_ptr =
+		(unsigned char *)dma_map_single(NULL, secdata->secdev_ov,
+			SEC_DEV_VECTOR_LEN, DMA_TO_DEVICE);
+	memcpy(secdata->secdev_key,
+		((struct crypto_aes_ctx *)crypto_tfm_ctx(tfm))->key, keylen);
+}
+
+#endif /* CONFIG_COLDFIRE_SEC */
+
 static void aes_encrypt(struct crypto_tfm *tfm, u8 *out, const u8 *in)
 {
 	const struct crypto_aes_ctx *ctx = crypto_tfm_ctx(tfm);
@@ -442,6 +594,16 @@ static struct crypto_alg aes_alg = {
 	.cra_list		=	LIST_HEAD_INIT(aes_alg.cra_list),
 	.cra_u			=	{
 		.cipher = {
+#ifdef CONFIG_COLDFIRE_SEC
+			.cia_secalg = {
+				.secalg_ecb_init    = aes_sec_ecb_init,
+				.secalg_ecb_encrypt = aes_sec_ecb_encrypt,
+				.secalg_ecb_decrypt = aes_sec_ecb_decrypt,
+				.secalg_cbc_init    = aes_sec_cbc_init,
+				.secalg_cbc_encrypt = aes_sec_cbc_encrypt,
+				.secalg_cbc_decrypt = aes_sec_cbc_decrypt
+			},
+#endif /* CONFIG_COLDFIRE_SEC */
 			.cia_min_keysize	=	AES_MIN_KEY_SIZE,
 			.cia_max_keysize	=	AES_MAX_KEY_SIZE,
 			.cia_setkey		=	crypto_aes_set_key,
diff --git a/crypto/algapi.c b/crypto/algapi.c
index e65cb50..80de55c 100644
--- a/crypto/algapi.c
+++ b/crypto/algapi.c
@@ -21,6 +21,19 @@
 
 #include "internal.h"
 
+#ifdef CONFIG_COLDFIRE_SEC
+#include <asm/m5485sec.h>
+#include <asm/virtconvert.h>
+#include <asm-m68k/io.h>
+#include <asm/semaphore.h>
+
+struct sec_descriptor *sec_desc;
+/*struct sec_data* secdata;*/
+struct sec_device_data *secdata;
+struct sec_data *secdatamap;
+struct semaphore sem_ciph;
+#endif /* CONFIG_COLDFIRE_SEC */
+
 static LIST_HEAD(crypto_template_list);
 
 void crypto_larval_error(const char *name, u32 type, u32 mask)
@@ -668,6 +681,25 @@ EXPORT_SYMBOL_GPL(crypto_xor);
 
 static int __init crypto_algapi_init(void)
 {
+#ifdef CONFIG_COLDFIRE_SEC
+	secdata = kmalloc(sizeof(struct sec_device_data), GFP_KERNEL);
+	if (!secdata) {
+		printk(KERN_DEBUG "SEC memory allocation error!!!\n");
+		return -ENOMEM;
+	}
+
+	sec_desc = sec_desc_alloc();
+	if (!sec_desc) {
+		kfree(secdata);
+		printk(KERN_DEBUG "SEC memory allocation error "
+			"(sec_desc_alloc)!!!\n");
+		return -ENOMEM;
+	}
+
+	secdata->secdev_desc = sec_desc;
+	init_MUTEX(&sem_ciph);
+#endif /* CONFIG_COLDFIRE_SEC */
+
 	crypto_init_proc();
 	return 0;
 }
diff --git a/crypto/arc4.c b/crypto/arc4.c
index 8be47e1..d852527 100644
--- a/crypto/arc4.c
+++ b/crypto/arc4.c
@@ -15,21 +15,146 @@
 #include <linux/init.h>
 #include <linux/crypto.h>
 
+#ifdef CONFIG_COLDFIRE_SEC
+#include <asm/m5485sec.h>
+#include "internal.h"
+#include <linux/dma-mapping.h>
+
+#define ARC4_SEC_MIN_KEY_SIZE   5
+#define ARC4_SEC_MAX_KEY_SIZE   16
+#define ARC4_SEC_CONTEXT_LEN    259
+#endif /* CONFIG_COLDFIRE_SEC */
+
 #define ARC4_MIN_KEY_SIZE	1
 #define ARC4_MAX_KEY_SIZE	256
 #define ARC4_BLOCK_SIZE		1
 
+#ifdef CONFIG_COLDFIRE_SEC
+static int
+arc4_sec_ecb_crypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static void arc4_sec_ecb_init(struct crypto_tfm *tfm);
+static struct crypto_alg arc4_alg;
+#endif /* CONFIG_COLDFIRE_SEC */
+
 struct arc4_ctx {
 	u8 S[256];
 	u8 x, y;
+#ifdef CONFIG_COLDFIRE_SEC
+	char key[ARC4_SEC_MAX_KEY_SIZE];
+	int keylen;
+	int first;
+#endif /* CONFIG_COLDFIRE_SEC */
 };
 
+#ifdef CONFIG_COLDFIRE_SEC
+static int
+arc4_sec_ecb_crypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	int first = ((struct arc4_ctx *)crypto_tfm_ctx(tfm))->first;
+
+	if (!first) {
+		sec_desc->secdesc_header = SEC_ALG_AFEU_CONTEXT;
+
+		memcpy(secdata->secdev_iv,
+			((struct arc4_ctx *)crypto_tfm_ctx(tfm))->S,
+			ARC4_SEC_CONTEXT_LEN);
+	} else
+		sec_desc->secdesc_header = SEC_ALG_AFEU_KEY;
+
+	sec_desc->secdesc_data_in_len =
+		sec_desc->secdesc_data_out_len = nbytes;
+	sec_nonblock_execute(sec_desc);
+
+	memcpy(((struct arc4_ctx *)crypto_tfm_ctx(tfm))->S,
+		secdata->secdev_ov, ARC4_SEC_CONTEXT_LEN);
+
+	if (first) {
+		((struct arc4_ctx *)crypto_tfm_ctx(tfm))->first = 0;
+		sec_desc->secdesc_iv_in_ptr =
+			(unsigned char *)dma_map_single(
+				NULL,
+				secdata->secdev_iv,
+				SEC_DEV_VECTOR_LEN,
+				DMA_TO_DEVICE);
+		sec_desc->secdesc_iv_in_len = ARC4_SEC_CONTEXT_LEN;
+		sec_desc->secdesc_key_len = 0;
+		sec_desc->secdesc_key_ptr = NULL;
+	}
+	return 0;
+}
+
+static void arc4_sec_ecb_init(struct crypto_tfm *tfm)
+{
+	int first = ((struct arc4_ctx *)crypto_tfm_ctx(tfm))->first;
+	int keylen = ((struct arc4_ctx *)crypto_tfm_ctx(tfm))->keylen;
+
+	memset(sec_desc, 0, sizeof(struct sec_descriptor));
+	sec_desc->secdesc_data_in_ptr =
+		(unsigned char *)dma_map_single(
+			NULL,
+			secdata->secdev_inbuf,
+			SEC_DEV_BUF,
+			DMA_TO_DEVICE);
+	sec_desc->secdesc_data_out_ptr =
+		(unsigned char *)dma_map_single(
+			NULL,
+			secdata->secdev_outbuf,
+			SEC_DEV_BUF,
+			DMA_TO_DEVICE);
+	sec_desc->secdesc_iv_out_ptr =
+		(unsigned char *)dma_map_single(
+			NULL,
+			secdata->secdev_ov,
+			SEC_DEV_VECTOR_LEN,
+			DMA_TO_DEVICE);
+	sec_desc->secdesc_iv_out_len = ARC4_SEC_CONTEXT_LEN;
+
+	if (first) {
+		sec_desc->secdesc_key_len = keylen;
+		sec_desc->secdesc_key_ptr =
+			(unsigned char *)dma_map_single(
+				NULL,
+				secdata->secdev_key,
+				SEC_DEV_KEY_LEN,
+				DMA_TO_DEVICE);
+		memcpy(secdata->secdev_key,
+			((struct arc4_ctx *)crypto_tfm_ctx(tfm))->key,
+			keylen);
+	} else {
+		sec_desc->secdesc_iv_in_ptr =
+			(unsigned char *)dma_map_single(
+				NULL,
+				secdata->secdev_iv,
+				SEC_DEV_VECTOR_LEN,
+				DMA_TO_DEVICE);
+		sec_desc->secdesc_iv_in_len = ARC4_SEC_CONTEXT_LEN;
+	}
+}
+#endif /* CONFIG_COLDFIRE_SEC */
 static int arc4_set_key(struct crypto_tfm *tfm, const u8 *in_key,
 			unsigned int key_len)
 {
 	struct arc4_ctx *ctx = crypto_tfm_ctx(tfm);
 	int i, j = 0, k = 0;
-
+#ifdef CONFIG_COLDFIRE_SEC
+	if (key_len >= ARC4_SEC_MIN_KEY_SIZE &&
+		key_len <= ARC4_SEC_MAX_KEY_SIZE) {
+
+		((struct arc4_ctx *)ctx)->keylen = key_len;
+		memcpy(((struct arc4_ctx *)ctx)->key, in_key, key_len);
+
+		arc4_alg.cra_u.cipher.cia_secalg.secalg_ecb_init
+			= arc4_sec_ecb_init;
+		((struct arc4_ctx *)ctx)->first = 1;
+		return 0;
+	} else {
+		arc4_alg.cra_u.cipher.cia_secalg.secalg_ecb_init = NULL;
+		printk(KERN_DEBUG "%s:we do not support the seklen %d\n",
+			__func__, key_len);
+	}
+#endif /* CONFIG_COLDFIRE_SEC */
 	ctx->x = 1;
 	ctx->y = 0;
 
@@ -77,12 +202,22 @@ static struct crypto_alg arc4_alg = {
 	.cra_ctxsize		=	sizeof(struct arc4_ctx),
 	.cra_module		=	THIS_MODULE,
 	.cra_list		=	LIST_HEAD_INIT(arc4_alg.cra_list),
-	.cra_u			=	{ .cipher = {
-	.cia_min_keysize	=	ARC4_MIN_KEY_SIZE,
-	.cia_max_keysize	=	ARC4_MAX_KEY_SIZE,
-	.cia_setkey	   	= 	arc4_set_key,
-	.cia_encrypt	 	=	arc4_crypt,
-	.cia_decrypt	  	=	arc4_crypt } }
+	.cra_u			=	{
+		.cipher = {
+#ifdef CONFIG_COLDFIRE_SEC
+			.cia_secalg = {
+				.secalg_ecb_init    = arc4_sec_ecb_init,
+				.secalg_ecb_encrypt = arc4_sec_ecb_crypt,
+				.secalg_ecb_decrypt = arc4_sec_ecb_crypt
+			},
+#endif /* CONFIG_COLDFIRE_SEC */
+			.cia_min_keysize	=	ARC4_MIN_KEY_SIZE,
+			.cia_max_keysize	=	ARC4_MAX_KEY_SIZE,
+			.cia_setkey	   	= 	arc4_set_key,
+			.cia_encrypt	 	=	arc4_crypt,
+			.cia_decrypt	  	=	arc4_crypt
+		}
+	}
 };
 
 static int __init arc4_init(void)
diff --git a/crypto/cbc.c b/crypto/cbc.c
index 61ac42e..18477f7 100644
--- a/crypto/cbc.c
+++ b/crypto/cbc.c
@@ -19,6 +19,11 @@
 #include <linux/scatterlist.h>
 #include <linux/slab.h>
 
+#ifdef CONFIG_COLDFIRE_SEC
+#include <crypto/scatterwalk.h>
+#include <asm/m5485sec.h>
+#endif /* CONFIG_COLDFIRE_SEC */
+
 struct crypto_cbc_ctx {
 	struct crypto_cipher *child;
 };
@@ -39,6 +44,80 @@ static int crypto_cbc_setkey(struct crypto_tfm *parent, const u8 *key,
 	return err;
 }
 
+#ifdef CONFIG_COLDFIRE_SEC
+static int
+sec_cbc_crypt(
+	struct crypto_tfm *tfm,
+	struct scatterlist *dst,
+	struct scatterlist *src,
+	unsigned int nbytes,
+	unsigned char *iv,
+	void (*init)(struct crypto_tfm *tfm),
+	int (*crypt_sec)(struct crypto_tfm *tfm,
+		unsigned char *iv,
+		unsigned int nbytes))
+{
+	struct scatter_walk walk_in, walk_out;
+	int ret;
+	unsigned int bsize = crypto_tfm_alg_blocksize(tfm);
+	unsigned int maxsize;
+
+	maxsize = ((unsigned int)(SEC_BUF_SIZE/bsize)) * bsize;
+
+	if (!nbytes) {
+		printk(KERN_DEBUG "%s: nbytes %d error\n",
+			__func__, nbytes);
+		return 0;
+	}
+	if (nbytes % bsize) {
+		tfm->crt_flags |= CRYPTO_TFM_RES_BAD_BLOCK_LEN;
+		printk(KERN_DEBUG "%s:nbytes %d,bsize %d error\n",
+			__func__, nbytes, bsize);
+		return -EINVAL;
+	}
+
+	if (down_interruptible(&sem_ciph)) {
+		printk(KERN_DEBUG "%s: down_interruptible error\n",
+			__func__);
+		return -ERESTARTSYS;
+	}
+
+	scatterwalk_start(&walk_in, src);
+	scatterwalk_start(&walk_out, dst);
+	init(tfm);
+
+	while (1) {
+		scatterwalk_map(&walk_in, 0);
+		scatterwalk_map(&walk_out, 1);
+
+		if (nbytes <= maxsize)
+			maxsize = nbytes;
+
+		scatterwalk_copychunks(secdata->secdev_inbuf,
+			&walk_in, maxsize, 0);
+
+		ret = crypt_sec(tfm, iv, maxsize);
+		if (ret) {
+			scatterwalk_done(&walk_in, 0, nbytes);
+			scatterwalk_done(&walk_out, 1, nbytes);
+			return ret;
+		}
+
+		nbytes -= maxsize;
+
+		scatterwalk_copychunks(secdata->secdev_outbuf,
+			&walk_out, maxsize, 1);
+		scatterwalk_done(&walk_in, 0, maxsize);
+		scatterwalk_done(&walk_out, 1, maxsize);
+
+		if (!nbytes)
+			break;
+	}
+
+	up(&sem_ciph);
+	return 0;
+}
+#endif /* CONFIG_COLDFIRE_SEC */
 static int crypto_cbc_encrypt_segment(struct blkcipher_desc *desc,
 				      struct blkcipher_walk *walk,
 				      struct crypto_cipher *tfm)
@@ -96,8 +175,21 @@ static int crypto_cbc_encrypt(struct blkcipher_desc *desc,
 	struct crypto_cbc_ctx *ctx = crypto_blkcipher_ctx(tfm);
 	struct crypto_cipher *child = ctx->child;
 	int err;
+#ifdef CONFIG_COLDFIRE_SEC
+	struct crypto_tfm *sec_tfm = crypto_cipher_tfm(child);
 
 	blkcipher_walk_init(&walk, dst, src, nbytes);
+
+	err = blkcipher_walk_virt(desc, &walk);
+
+	if (sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_cbc_encrypt &&
+		sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_cbc_init) {
+		err = sec_cbc_crypt(sec_tfm, dst, src, nbytes, walk.iv,
+		sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_cbc_init,
+		sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_cbc_encrypt);
+	} else {
+#endif /* CONFIG_SEC */
+	blkcipher_walk_init(&walk, dst, src, nbytes);
 	err = blkcipher_walk_virt(desc, &walk);
 
 	while ((nbytes = walk.nbytes)) {
@@ -107,7 +199,9 @@ static int crypto_cbc_encrypt(struct blkcipher_desc *desc,
 			nbytes = crypto_cbc_encrypt_segment(desc, &walk, child);
 		err = blkcipher_walk_done(desc, &walk, nbytes);
 	}
-
+#ifdef CONFIG_COLDFIRE_SEC
+	}
+#endif /* CONFIG_SEC */
 	return err;
 }
 
@@ -175,7 +269,18 @@ static int crypto_cbc_decrypt(struct blkcipher_desc *desc,
 	struct crypto_cbc_ctx *ctx = crypto_blkcipher_ctx(tfm);
 	struct crypto_cipher *child = ctx->child;
 	int err;
+#ifdef CONFIG_COLDFIRE_SEC
+	struct crypto_tfm *sec_tfm = crypto_cipher_tfm(child);
+	blkcipher_walk_init(&walk, dst, src, nbytes);
+	err = blkcipher_walk_virt(desc, &walk);
 
+	if (sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_cbc_decrypt
+		&& sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_cbc_init) {
+		err = sec_cbc_crypt(sec_tfm, dst, src, nbytes, walk.iv,
+		sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_cbc_init,
+		sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_cbc_decrypt);
+	} else{
+#endif /* CONFIG_SEC */
 	blkcipher_walk_init(&walk, dst, src, nbytes);
 	err = blkcipher_walk_virt(desc, &walk);
 
@@ -186,7 +291,9 @@ static int crypto_cbc_decrypt(struct blkcipher_desc *desc,
 			nbytes = crypto_cbc_decrypt_segment(desc, &walk, child);
 		err = blkcipher_walk_done(desc, &walk, nbytes);
 	}
-
+#ifdef CONFIG_COLDFIRE_SEC
+	}
+#endif /* CONFIG_SEC */
 	return err;
 }
 
diff --git a/crypto/des_generic.c b/crypto/des_generic.c
index 355ecb7..89d3349 100644
--- a/crypto/des_generic.c
+++ b/crypto/des_generic.c
@@ -21,16 +21,66 @@
 #include <linux/types.h>
 
 #include <crypto/des.h>
-
+#ifdef CONFIG_COLDFIRE_SEC
+#include <asm/m5485sec.h>
+#include "internal.h"
+#include <linux/dma-mapping.h>
+static int
+des_sec_ecb_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static int
+des_sec_ecb_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static int
+des_sec_cbc_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static int
+des_sec_cbc_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static int
+des3_sec_ecb_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static int
+des3_sec_ecb_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static int
+des3_sec_cbc_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static int
+des3_sec_cbc_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static int
+des_sec_ecb_crypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static int
+des_sec_cbc_crypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes);
+static void des_sec_ecb_init(struct crypto_tfm *tfm);
+static void des3_sec_ecb_init(struct crypto_tfm *tfm);
+static void
+des_des3_sec_ecb_init(struct crypto_tfm *tfm,
+	char *key,  int keylen);
+static void des_sec_cbc_init(struct crypto_tfm *tfm);
+static void des3_sec_cbc_init(struct crypto_tfm *tfm);
+static void
+des_des3_sec_cbc_init(struct crypto_tfm *tfm,
+	char *key, int keylen);
+#endif /* CONFIG_COLDFIRESEC */
 #define ROL(x, r) ((x) = rol32((x), (r)))
 #define ROR(x, r) ((x) = ror32((x), (r)))
 
 struct des_ctx {
 	u32 expkey[DES_EXPKEY_WORDS];
+#ifdef CONFIG_COLDFIRE_SEC
+	char key[DES_KEY_SIZE];
+#endif /* CONFIG_COLDFIRE_SEC */
 };
 
 struct des3_ede_ctx {
 	u32 expkey[DES3_EDE_EXPKEY_WORDS];
+#ifdef CONFIG_COLDFIRE_SEC
+	char key[DES3_EDE_KEY_SIZE];
+#endif /* CONFIG_COLDFIRE_SEC */
 };
 
 /* Lookup tables for key expansion */
@@ -616,6 +666,182 @@ static const u32 S8[64] = {
 
 #define PC2(a, b, c, d) (T4(d) | T3(c) | T2(b) | T1(a))
 
+#ifdef CONFIG_COLDFIRE_SEC
+static int
+des_sec_ecb_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_ENCR_DES_ECB_SINGLE;
+	return des_sec_ecb_crypt(tfm, iv, nbytes);
+}
+
+static int
+des_sec_ecb_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_DECR_DES_ECB_SINGLE;
+	return des_sec_ecb_crypt(tfm, iv, nbytes);
+}
+
+static int
+des_sec_cbc_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_ENCR_DES_CBC_SINGLE;
+	return des_sec_cbc_crypt(tfm, iv, nbytes);
+}
+
+static int
+des_sec_cbc_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_DECR_DES_CBC_SINGLE;
+	return des_sec_cbc_crypt(tfm, iv, nbytes);
+}
+
+
+static int
+des3_sec_ecb_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_ENCR_DES_ECB_TRIPLE;
+	return des_sec_ecb_crypt(tfm, iv, nbytes);
+}
+
+static int
+des3_sec_ecb_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_DECR_DES_ECB_TRIPLE;
+	return des_sec_ecb_crypt(tfm, iv, nbytes);
+}
+
+static int
+des3_sec_cbc_encrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_ENCR_DES_CBC_TRIPLE;
+	return des_sec_cbc_crypt(tfm, iv, nbytes);
+}
+
+static int
+des3_sec_cbc_decrypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_header = SEC_ALG_DECR_DES_CBC_TRIPLE;
+	return des_sec_cbc_crypt(tfm, iv, nbytes);
+}
+
+
+static int
+des_sec_ecb_crypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	sec_desc->secdesc_data_in_len =
+		sec_desc->secdesc_data_out_len = nbytes;
+
+	sec_nonblock_execute(sec_desc);
+	return 0;
+}
+
+static int
+des_sec_cbc_crypt(struct crypto_tfm *tfm,
+	unsigned char *iv, unsigned int nbytes)
+{
+	int bsize = crypto_tfm_alg_blocksize(tfm);
+	sec_desc->secdesc_data_in_len = sec_desc->secdesc_data_out_len = nbytes;
+	memcpy(secdata->secdev_iv, iv, bsize);
+
+	sec_nonblock_execute(sec_desc);
+
+	memcpy(iv, secdata->secdev_ov, bsize);
+	return 0;
+}
+
+static void des_sec_ecb_init(struct crypto_tfm *tfm)
+{
+	des_des3_sec_ecb_init(tfm,
+		((struct des_ctx *)crypto_tfm_ctx(tfm))->key,
+		DES_KEY_SIZE);
+}
+
+static void des3_sec_ecb_init(struct crypto_tfm *tfm)
+{
+	des_des3_sec_ecb_init(tfm,
+		((struct des3_ede_ctx *)crypto_tfm_ctx(tfm))->key,
+		DES3_EDE_KEY_SIZE);
+}
+
+static void
+des_des3_sec_ecb_init(struct crypto_tfm *tfm,
+	char *key,  int keylen)
+{
+	memset(sec_desc, 0, sizeof(struct sec_descriptor));
+
+	sec_desc->secdesc_key_len = keylen;
+	sec_desc->secdesc_key_ptr =
+		(unsigned char *)dma_map_single(NULL,
+			secdata->secdev_key, SEC_DEV_KEY_LEN, DMA_TO_DEVICE);
+	sec_desc->secdesc_data_in_ptr =
+		(unsigned char *)dma_map_single(NULL,
+			secdata->secdev_inbuf, SEC_DEV_BUF, DMA_TO_DEVICE);
+	sec_desc->secdesc_data_out_ptr =
+		(unsigned char *)dma_map_single(NULL,
+			secdata->secdev_outbuf, SEC_DEV_BUF, DMA_TO_DEVICE);
+
+	memcpy(secdata->secdev_key, key, keylen);
+}
+
+static void des_sec_cbc_init(struct crypto_tfm *tfm)
+{
+	des_des3_sec_cbc_init(tfm,
+		((struct des_ctx *)crypto_tfm_ctx(tfm))->key,
+		DES_KEY_SIZE);
+}
+
+static void des3_sec_cbc_init(struct crypto_tfm *tfm)
+{
+	des_des3_sec_cbc_init(tfm,
+		((struct des3_ede_ctx *)crypto_tfm_ctx(tfm))->key,
+		DES3_EDE_KEY_SIZE);
+}
+
+static void des_des3_sec_cbc_init(
+	struct crypto_tfm *tfm, char *key, int keylen)
+{
+	int bsize = crypto_tfm_alg_blocksize(tfm);
+	if (bsize != DES_BLOCK_SIZE) {
+		printk(KERN_DEBUG "%s:bsize(%d) != DES_BLOCK_SIZE(%d)\n",
+			__func__, bsize, DES_BLOCK_SIZE);
+	}
+	memset(sec_desc, 0, sizeof(struct sec_descriptor));
+
+	sec_desc->secdesc_key_len = keylen;
+	sec_desc->secdesc_key_ptr =
+		(unsigned char *)dma_map_single(NULL,
+			secdata->secdev_key, SEC_DEV_KEY_LEN,
+			DMA_TO_DEVICE);
+	sec_desc->secdesc_data_in_ptr =
+		(unsigned char *)dma_map_single(NULL,
+			secdata->secdev_inbuf, SEC_DEV_BUF,
+			DMA_TO_DEVICE);
+	sec_desc->secdesc_data_out_ptr =
+		(unsigned char *)dma_map_single(NULL,
+			secdata->secdev_outbuf, SEC_DEV_VECTOR_LEN,
+			DMA_TO_DEVICE);
+	sec_desc->secdesc_iv_out_len = sec_desc->secdesc_iv_in_len = bsize;
+	sec_desc->secdesc_iv_in_ptr =
+		(unsigned char *)dma_map_single(NULL,
+			secdata->secdev_iv, SEC_DEV_VECTOR_LEN,
+			DMA_TO_DEVICE);
+	sec_desc->secdesc_iv_out_ptr =
+		(unsigned char *)dma_map_single(NULL,
+			secdata->secdev_ov, SEC_DEV_VECTOR_LEN,
+			DMA_TO_DEVICE);
+	memcpy(secdata->secdev_key, key, keylen);
+}
+
+#endif /* CONFIG_COLDFIRE_SEC */
 /*
  * Encryption key expansion
  *
@@ -796,7 +1022,9 @@ static int des_setkey(struct crypto_tfm *tfm, const u8 *key,
 
 	/* Copy to output */
 	memcpy(dctx->expkey, tmp, sizeof(dctx->expkey));
-
+#ifdef CONFIG_COLDFIRE_SEC
+	memcpy(((struct des_ctx *)dctx)->key, key, DES_KEY_SIZE);
+#endif /* CONFIG_COLDFIRE_SEC */
 	return 0;
 }
 
@@ -874,6 +1102,9 @@ static int des3_ede_setkey(struct crypto_tfm *tfm, const u8 *key,
 		return -EINVAL;
 	}
 
+#ifdef CONFIG_COLDFIRE_SEC
+	memcpy(((struct des3_ede_ctx *)dctx)->key, key, DES3_EDE_KEY_SIZE);
+#endif /* CONFIG_COLDFIRE_SEC */
 	des_ekey(expkey, key); expkey += DES_EXPKEY_WORDS; key += DES_KEY_SIZE;
 	dkey(expkey, key); expkey += DES_EXPKEY_WORDS; key += DES_KEY_SIZE;
 	des_ekey(expkey, key);
@@ -951,12 +1182,25 @@ static struct crypto_alg des_alg = {
 	.cra_module		=	THIS_MODULE,
 	.cra_alignmask		=	3,
 	.cra_list		=	LIST_HEAD_INIT(des_alg.cra_list),
-	.cra_u			=	{ .cipher = {
-	.cia_min_keysize	=	DES_KEY_SIZE,
-	.cia_max_keysize	=	DES_KEY_SIZE,
-	.cia_setkey		=	des_setkey,
-	.cia_encrypt		=	des_encrypt,
-	.cia_decrypt		=	des_decrypt } }
+	.cra_u			=	{
+		.cipher = {
+#ifdef CONFIG_COLDFIRE_SEC
+			.cia_secalg             =       {
+				.secalg_ecb_init    = des_sec_ecb_init,
+				.secalg_ecb_encrypt = des_sec_ecb_encrypt,
+				.secalg_ecb_decrypt = des_sec_ecb_decrypt,
+				.secalg_cbc_init    = des_sec_cbc_init,
+				.secalg_cbc_encrypt = des_sec_cbc_encrypt,
+				.secalg_cbc_decrypt = des_sec_cbc_decrypt
+			},
+#endif /* CONFIG_COLDFIRE_SEC */
+			.cia_min_keysize	=	DES_KEY_SIZE,
+			.cia_max_keysize	=	DES_KEY_SIZE,
+			.cia_setkey		=	des_setkey,
+			.cia_encrypt		=	des_encrypt,
+			.cia_decrypt		=	des_decrypt
+		}
+	}
 };
 
 static struct crypto_alg des3_ede_alg = {
@@ -967,12 +1211,25 @@ static struct crypto_alg des3_ede_alg = {
 	.cra_module		=	THIS_MODULE,
 	.cra_alignmask		=	3,
 	.cra_list		=	LIST_HEAD_INIT(des3_ede_alg.cra_list),
-	.cra_u			=	{ .cipher = {
-	.cia_min_keysize	=	DES3_EDE_KEY_SIZE,
-	.cia_max_keysize	=	DES3_EDE_KEY_SIZE,
-	.cia_setkey		=	des3_ede_setkey,
-	.cia_encrypt		=	des3_ede_encrypt,
-	.cia_decrypt		=	des3_ede_decrypt } }
+	.cra_u			=	{
+		.cipher = {
+#ifdef CONFIG_COLDFIRE_SEC
+			.cia_secalg             =       {
+				.secalg_ecb_init    = des3_sec_ecb_init,
+				.secalg_ecb_encrypt = des3_sec_ecb_encrypt,
+				.secalg_ecb_decrypt = des3_sec_ecb_decrypt,
+				.secalg_cbc_init    = des3_sec_cbc_init,
+				.secalg_cbc_encrypt = des3_sec_cbc_encrypt,
+				.secalg_cbc_decrypt = des3_sec_cbc_decrypt
+			},
+#endif /* CONFIG_COLDFIRE_SEC */
+			.cia_min_keysize	=	DES3_EDE_KEY_SIZE,
+			.cia_max_keysize	=	DES3_EDE_KEY_SIZE,
+			.cia_setkey		=	des3_ede_setkey,
+			.cia_encrypt		=	des3_ede_encrypt,
+			.cia_decrypt		=	des3_ede_decrypt
+		}
+	}
 };
 
 MODULE_ALIAS("des3_ede");
diff --git a/crypto/ecb.c b/crypto/ecb.c
index a46838e..7763740 100644
--- a/crypto/ecb.c
+++ b/crypto/ecb.c
@@ -18,6 +18,11 @@
 #include <linux/scatterlist.h>
 #include <linux/slab.h>
 
+#ifdef CONFIG_COLDFIRE_SEC
+#include <crypto/scatterwalk.h>
+#include <asm/m5485sec.h>
+#endif /* CONFIG_COLDFIRE_SEC */
+
 struct crypto_ecb_ctx {
 	struct crypto_cipher *child;
 };
@@ -65,6 +70,72 @@ static int crypto_ecb_crypt(struct blkcipher_desc *desc,
 
 	return err;
 }
+#ifdef CONFIG_COLDFIRE_SEC
+static int sec_ecb_crypt(struct crypto_tfm *tfm,
+	struct scatterlist *dst,
+	struct scatterlist *src,
+	unsigned int nbytes,
+	unsigned char *iv,
+	void (*init)(struct crypto_tfm *tfm),
+	int (*crypt_sec)(struct crypto_tfm *tfm,
+		unsigned char *iv, unsigned int nbytes))
+{
+	struct scatter_walk walk_in, walk_out;
+	int ret;
+	int bsize  = crypto_tfm_alg_blocksize(tfm);
+	unsigned int maxsize;
+
+	maxsize = ((unsigned int)(SEC_BUF_SIZE/bsize)) * bsize;
+
+	if (!nbytes)
+		return 0;
+
+	if (nbytes % bsize) {
+		tfm->crt_flags |= CRYPTO_TFM_RES_BAD_BLOCK_LEN;
+		return -EINVAL;
+	}
+
+	if (down_interruptible(&sem_ciph))
+		return -ERESTARTSYS;
+
+	scatterwalk_start(&walk_in, src);
+	scatterwalk_start(&walk_out, dst);
+	init(tfm);
+
+	while (1) {
+
+		scatterwalk_map(&walk_in, 0);
+		scatterwalk_map(&walk_out, 1);
+
+		if (nbytes <= maxsize)
+			maxsize = nbytes;
+
+		scatterwalk_copychunks(secdata->secdev_inbuf,
+			&walk_in, maxsize, 0);
+
+		ret = crypt_sec(tfm, iv, maxsize);
+
+		if (ret) {
+			scatterwalk_done(&walk_in, 0, nbytes);
+			scatterwalk_done(&walk_out, 1, nbytes);
+			return ret;
+		}
+
+		nbytes -= maxsize;
+
+		scatterwalk_copychunks(secdata->secdev_outbuf,
+			&walk_out, maxsize, 1);
+		scatterwalk_done(&walk_in, 0, maxsize);
+		scatterwalk_done(&walk_out, 1, maxsize);
+
+		if (!nbytes)
+			break;
+	}
+
+	up(&sem_ciph);
+	return 0;
+}
+#endif /* CONFIG_COLDFIRE_SEC */
 
 static int crypto_ecb_encrypt(struct blkcipher_desc *desc,
 			      struct scatterlist *dst, struct scatterlist *src,
@@ -74,7 +145,15 @@ static int crypto_ecb_encrypt(struct blkcipher_desc *desc,
 	struct crypto_blkcipher *tfm = desc->tfm;
 	struct crypto_ecb_ctx *ctx = crypto_blkcipher_ctx(tfm);
 	struct crypto_cipher *child = ctx->child;
-
+#ifdef CONFIG_COLDFIRE_SEC
+	struct crypto_tfm *sec_tfm = crypto_cipher_tfm(child);
+	if (sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_ecb_encrypt
+		&& sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_ecb_init)
+		return sec_ecb_crypt(sec_tfm, dst, src, nbytes, NULL,
+		sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_ecb_init,
+		sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_ecb_encrypt);
+	else
+#endif /* CONFIG_COLDFIRE_SEC */
 	blkcipher_walk_init(&walk, dst, src, nbytes);
 	return crypto_ecb_crypt(desc, &walk, child,
 				crypto_cipher_alg(child)->cia_encrypt);
@@ -88,7 +167,16 @@ static int crypto_ecb_decrypt(struct blkcipher_desc *desc,
 	struct crypto_blkcipher *tfm = desc->tfm;
 	struct crypto_ecb_ctx *ctx = crypto_blkcipher_ctx(tfm);
 	struct crypto_cipher *child = ctx->child;
-
+#ifdef CONFIG_COLDFIRE_SEC
+	struct crypto_tfm *sec_tfm = crypto_cipher_tfm(child);
+
+	if (sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_ecb_decrypt
+	&& sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_ecb_init)
+		return sec_ecb_crypt(sec_tfm, dst, src, nbytes, NULL,
+		sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_ecb_init,
+		sec_tfm->__crt_alg->cra_cipher.cia_secalg.secalg_ecb_decrypt);
+	else
+#endif /* CONFIG_COLDFIRE_SEC */
 	blkcipher_walk_init(&walk, dst, src, nbytes);
 	return crypto_ecb_crypt(desc, &walk, child,
 				crypto_cipher_alg(child)->cia_decrypt);
diff --git a/include/crypto/aes.h b/include/crypto/aes.h
index d480b76..9bfab62 100644
--- a/include/crypto/aes.h
+++ b/include/crypto/aes.h
@@ -19,6 +19,9 @@ struct crypto_aes_ctx {
 	u32 key_length;
 	u32 key_enc[60];
 	u32 key_dec[60];
+#ifdef CONFIG_COLDFIRE_SEC
+	unsigned char key[AES_MAX_KEY_SIZE];
+#endif /* CONFIG_COLDFIRE_SEC */
 };
 
 extern u32 crypto_ft_tab[4][256];
diff --git a/include/linux/crypto.h b/include/linux/crypto.h
index 5e02d1b..da91b8d 100644
--- a/include/linux/crypto.h
+++ b/include/linux/crypto.h
@@ -73,6 +73,11 @@
 #define CRYPTO_TFM_RES_BAD_BLOCK_LEN 	0x00800000
 #define CRYPTO_TFM_RES_BAD_FLAGS 	0x01000000
 
+#ifdef CONFIG_COLDFIRE_SEC
+#define SEC_BUF_SIZE                    1024 * 1
+#define SEC_MAX_KEY_LEN                 64
+#define SEC_MAX_VECTOR_LEN              64
+#endif /* CONFIG_COLDFIRE_SEC */
 /*
  * Miscellaneous stuff.
  */
@@ -107,6 +112,35 @@ struct crypto_type;
 struct aead_givcrypt_request;
 struct skcipher_givcrypt_request;
 
+#ifdef CONFIG_COLDFIRE_SEC
+struct sec_alg {
+	void (*secalg_ecb_init)(struct crypto_tfm *tfm);
+	int (*secalg_ecb_encrypt)(struct crypto_tfm *tfm,
+		unsigned char *iv, unsigned int nbytes);
+	int (*secalg_ecb_decrypt)(struct crypto_tfm *tfm,
+		unsigned char *iv, unsigned int nbytes);
+	void (*secalg_cbc_init)(struct crypto_tfm *tfm);
+	int (*secalg_cbc_encrypt)(struct crypto_tfm *tfm,
+		unsigned char *iv, unsigned int nbytes);
+	int (*secalg_cbc_decrypt)(struct crypto_tfm *tfm,
+		unsigned char *iv, unsigned int nbytes);
+};
+
+struct sec_data {
+	char secdata_inbuf[SEC_BUF_SIZE];
+	char secdata_outbuf[SEC_BUF_SIZE];
+	char secdata_key[SEC_MAX_KEY_LEN];
+	char secdata_iv[SEC_MAX_VECTOR_LEN];
+	char secdata_ov[SEC_MAX_VECTOR_LEN];
+};
+
+extern struct semaphore sem_ciph;
+extern struct sec_descriptor *sec_desc;
+/*extern struct sec_data* secdata;*/
+extern struct sec_device_data *secdata;
+extern struct sec_data *secdatamap;
+#endif /* CONFIG_COLDFIRE_SEC */
+
 typedef void (*crypto_completion_t)(struct crypto_async_request *req, int err);
 
 struct crypto_async_request {
@@ -228,6 +262,9 @@ struct blkcipher_alg {
 };
 
 struct cipher_alg {
+#ifdef CONFIG_COLDFIRE_SEC
+	struct sec_alg cia_secalg;
+#endif /* CONFIG_COLDFIRE_SEC */
 	unsigned int cia_min_keysize;
 	unsigned int cia_max_keysize;
 	int (*cia_setkey)(struct crypto_tfm *tfm, const u8 *key,
-- 
1.5.6

