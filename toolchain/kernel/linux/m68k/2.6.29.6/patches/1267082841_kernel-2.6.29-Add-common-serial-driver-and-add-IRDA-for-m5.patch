From 9eaa978feb942497c4542cc82e63d5468dc8f184 Mon Sep 17 00:00:00 2001
From: Wang Huan <wanghuan@zch06.freescale.net>
Date: Thu, 25 Feb 2010 15:27:21 +0800
Subject: [PATCH 05/23] Add common serial driver and add IRDA support for m547x_8x

Add common serial driver for mcf5445x board and mcf547x, mcf548x boards.
Also add IRDA support for mcf547x, mcf548x boards.

Signed-off-by: Shrek Wu <b16972@freescale.com>
Signed-off-by: Jason Jin <jason.jin@freescale.com>
Signed-off-by: Chengju-Cai <b22600@freescale.com>
---
 arch/m68k/include/asm/mcfuart.h |   35 +++++++++++++---
 drivers/serial/Kconfig          |   13 ++++++
 drivers/serial/mcf.c            |   88 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 130 insertions(+), 6 deletions(-)

diff --git a/arch/m68k/include/asm/mcfuart.h b/arch/m68k/include/asm/mcfuart.h
index ef22938..9833e32 100644
--- a/arch/m68k/include/asm/mcfuart.h
+++ b/arch/m68k/include/asm/mcfuart.h
@@ -5,6 +5,7 @@
  *
  *	(C) Copyright 1999-2003, Greg Ungerer (gerg@snapgear.com)
  * 	(C) Copyright 2000, Lineo Inc. (www.lineo.com) 
+ * 	Copyright 2009 Freescale Semiconductor, Inc. All Rights Reserved.
  */
 
 /****************************************************************************/
@@ -47,18 +48,35 @@
 #define MCFUART_BASE1		0xfc060000	/* Base address of UART1 */
 #define MCFUART_BASE2		0xfc064000	/* Base address of UART2 */
 #define MCFUART_BASE3		0xfc068000	/* Base address of UART3 */
+#elif defined(CONFIG_M5445X)
+#include <asm/mcf5445x_intc.h>
+#define MCFUART_BASE1           0xfc060000      /* Base address of UART1 */
+#define MCFUART_BASE2           0xfc064000      /* Base address of UART2 */
+#define MCFUART_BASE3           0xfc068000      /* Base address of UART3 */
+#define MCFINT_VECBASE          64
+#define MCFINT_UART0            26
+#elif defined(CONFIG_M547X_8X)
+#define MCFUART_BASE1           0x8600          /* Base address of UART1 */
+#define MCFUART_BASE2           0x8700          /* Base address of UART2 */
+#define MCFUART_BASE3           0x8800          /* Base address of UART3 */
+#define MCFUART_BASE4           0x8900          /* Base address of UART4 */
+#define MCFINT_VECBASE          64
+#define MCFINT_UART0		35
+#define MCFINT_UART1            34
+#define MCFINT_UART2            33
+#define MCFINT_UART3            32
 #endif
 
-
+#ifndef __ASSEMBLY__
 #include <linux/serial_core.h>
 #include <linux/platform_device.h>
-
 struct mcf_platform_uart {
-	unsigned long	mapbase;	/* Physical address base */
-	void __iomem	*membase;	/* Virtual address if mapped */
-	unsigned int	irq;		/* Interrupt vector */
-	unsigned int	uartclk;	/* UART clock rate */
+	unsigned long   mapbase;        /* Physical address base */
+	void __iomem    *membase;       /* Virtual address if mapped */
+	unsigned int    irq;            /* Interrupt vector */
+	unsigned int    uartclk;        /* UART clock rate */
 };
+#endif
 
 /*
  *	Define the ColdFire UART register set addresses.
@@ -132,6 +150,11 @@ struct mcf_platform_uart {
 #define	MCFUART_USR_RXFULL	0x02		/* Receiver full */
 #define	MCFUART_USR_RXREADY	0x01		/* Receiver ready */
 
+#if defined(CONFIG_M547X_8X)
+#define MCFUART_USR_TXREADY_BN  0x0a
+#define MCFUART_USR_TXEMPTY_BN  0x0b
+#endif
+
 #define	MCFUART_USR_RXERR	(MCFUART_USR_RXBREAK | MCFUART_USR_RXFRAMING | \
 				MCFUART_USR_RXPARITY | MCFUART_USR_RXOVERRUN)
 
diff --git a/drivers/serial/Kconfig b/drivers/serial/Kconfig
index 7d7f576..9618026 100644
--- a/drivers/serial/Kconfig
+++ b/drivers/serial/Kconfig
@@ -1016,6 +1016,19 @@ config SERIAL_68328_RTS_CTS
 	bool "Support RTS/CTS on 68328 serial port"
 	depends on SERIAL_68328
 
+config SERIAL_COLDFIRE_IRDA
+	bool "ColdFire IRDA support"
+	depends on SERIAL_MCF
+	help
+	  This driver supports IRDA on the Motorola ColdFire.
+
+config SERIAL_COLDFIRE_EDMA
+	bool "ColdFire serial EDMA support"
+	depends on SERIAL_MCF
+	default n
+	help
+	  Enables EDMA in the Coldfire Serial driver.
+
 config SERIAL_MCF
 	bool "Coldfire serial support"
 	depends on COLDFIRE
diff --git a/drivers/serial/mcf.c b/drivers/serial/mcf.c
index 56841fe..d253f4d 100644
--- a/drivers/serial/mcf.c
+++ b/drivers/serial/mcf.c
@@ -4,6 +4,11 @@
  *	mcf.c -- Freescale ColdFire UART driver
  *
  *	(C) Copyright 2003-2007, Greg Ungerer <gerg@snapgear.com>
+ *          Copyright (C) 2008-2009 Freescale Semiconductor, Inc.
+ *          All rights reserved.
+ *              Jason Jin Jason.Jin@freescale.com
+ *              Shrek Wu B16972@freescale.com
+ *              Cheng Ju Cai b22600@freescale.com
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -23,9 +28,11 @@
 #include <linux/serial.h>
 #include <linux/serial_core.h>
 #include <linux/io.h>
+#include <linux/delay.h>
 #include <asm/coldfire.h>
 #include <asm/mcfsim.h>
 #include <asm/mcfuart.h>
+#include <asm/m5485psc.h>
 #include <asm/nettel.h>
 
 /****************************************************************************/
@@ -46,6 +53,10 @@
 #define	mcf_setppdtr(p, v)	do { } while (0)
 #endif
 
+#ifdef CONFIG_SERIAL_COLDFIRE_IRDA
+#define SERIAL_IRDA_LINE (2)
+#endif
+
 /****************************************************************************/
 
 /*
@@ -108,6 +119,15 @@ static void mcf_start_tx(struct uart_port *port)
 	unsigned long flags;
 
 	spin_lock_irqsave(&port->lock, flags);
+#ifdef CONFIG_SERIAL_COLDFIRE_IRDA
+	if (port->line == SERIAL_IRDA_LINE) {
+		/* Disable IRDA receiver*/
+		writeb(MCFUART_UCR_CMDRESETRX, port->membase + MCFUART_UCR);
+		writeb(MCFUART_UCR_CMDRESETTX, port->membase + MCFUART_UCR);
+
+		writeb(MCFUART_UCR_TXENABLE, port->membase + MCFUART_UCR);
+	}
+#endif
 	pp->imr |= MCFUART_UIR_TXREADY;
 	writeb(pp->imr, port->membase + MCFUART_UIMR);
 	spin_unlock_irqrestore(&port->lock, flags);
@@ -168,6 +188,30 @@ static int mcf_startup(struct uart_port *port)
 
 	spin_lock_irqsave(&port->lock, flags);
 
+#ifdef CONFIG_SERIAL_COLDFIRE_IRDA
+	if (port->line == SERIAL_IRDA_LINE) {
+		/* Put PSC in IrDA mode */
+		MCF_PSC_SICR(port->line) = MCF_PSC_SICR_SIM_SIR;
+
+		/* Set pulse width to 1.6 uS */
+		MCF_PSC_IRSDR(port->line) = (uint8_t)
+					    (16 * (CONFIG_MCFCLK / 10000000));
+		MCF_PSC_IRCR1(port->line) = MCF_PSC_IRCR1_SPUL;
+		MCF_PSC_IRCR2(port->line) = 0;
+
+		/* Enable RTS to send */
+		MCF_PSC_OPSET(port->line) = MCF_PSC_OPSET_RTS;
+
+		/* Setup FIFO Alarms */
+		MCF_PSC_RFAR(port->line) = MCF_PSC_RFAR_ALARM(248);
+		MCF_PSC_TFAR(port->line) = MCF_PSC_TFAR_ALARM(248);
+
+		MCF_PSC_RFCR(port->line) = MCF_PSC_RFCR_FRMEN
+					 | MCF_PSC_RFCR_GR(4);
+		MCF_PSC_TFCR(port->line) = MCF_PSC_TFCR_FRMEN
+					 | MCF_PSC_RFCR_GR(4);
+	}
+#endif
 	/* Reset UART, get it into known state... */
 	writeb(MCFUART_UCR_CMDRESETRX, port->membase + MCFUART_UCR);
 	writeb(MCFUART_UCR_CMDRESETTX, port->membase + MCFUART_UCR);
@@ -191,7 +235,17 @@ static void mcf_shutdown(struct uart_port *port)
 {
 	struct mcf_uart *pp = container_of(port, struct mcf_uart, port);
 	unsigned long flags;
+#ifdef CONFIG_SERIAL_COLDFIRE_IRDA
+	unsigned long 		delay_counter = 0;
+#endif
 
+#ifdef CONFIG_SERIAL_COLDFIRE_IRDA
+	while (!((readb(port->membase + MCFUART_USR)) & MCFUART_USR_TXEMPTY)) {
+		if (delay_counter++ > 25000)
+			break;
+		udelay(10);
+	}
+#endif
 	spin_lock_irqsave(&port->lock, flags);
 
 	/* Disable all interrupts now */
@@ -216,7 +270,14 @@ static void mcf_set_termios(struct uart_port *port, struct ktermios *termios,
 	unsigned int baudfr;
 #endif
 	unsigned char mr1, mr2;
+#ifdef CONFIG_SERIAL_COLDFIRE_IRDA
+	int i = 0;	/* hush GCC */
+#endif
 
+#ifdef CONFIG_SERIAL_COLDFIRE_IRDA
+	while (i++ < 35000)
+		udelay(1);
+#endif
 	baud = uart_get_baud_rate(port, termios, old, 0, 230400);
 #if defined(CONFIG_M5272)
 	baudclk = (MCF_BUSCLK / baud) / 32;
@@ -344,6 +405,23 @@ static void mcf_tx_chars(struct mcf_uart *pp)
 	while (readb(port->membase + MCFUART_USR) & MCFUART_USR_TXREADY) {
 		if (xmit->head == xmit->tail)
 			break;
+#ifdef CONFIG_SERIAL_COLDFIRE_IRDA
+		if (port->line == SERIAL_IRDA_LINE) {
+			while (!((readb(port->membase + MCFUART_USR))\
+				& MCFUART_USR_TXEMPTY))
+				;
+			/* delay for settle */
+#if defined(CONFIG_M548X)
+			udelay(1);
+#elif defined(CONFIG_M547X)
+			udelay(2);
+#else
+			int i = 0;
+			while (i++ < 25000)
+				udelay(1);
+#endif
+		}
+#endif
 		writeb(xmit->buf[xmit->tail], port->membase + MCFUART_UTB);
 		xmit->tail = (xmit->tail + 1) & (UART_XMIT_SIZE -1);
 		port->icount.tx++;
@@ -353,6 +431,16 @@ static void mcf_tx_chars(struct mcf_uart *pp)
 		uart_write_wakeup(port);
 
 	if (xmit->head == xmit->tail) {
+#ifdef CONFIG_SERIAL_COLDFIRE_IRDA
+		if (port->line == SERIAL_IRDA_LINE) {
+			/* Enable receiver for IRDA */
+			writeb(MCFUART_UCR_CMDRESETRX,\
+				port->membase + MCFUART_UCR);
+			/* reset RX */
+			writeb(MCFUART_UCR_TXENABLE | MCFUART_UCR_RXENABLE,\
+				port->membase + MCFUART_UCR);
+		}
+#endif
 		pp->imr &= ~MCFUART_UIR_TXREADY;
 		writeb(pp->imr, port->membase + MCFUART_UIMR);
 	}
-- 
1.6.4

