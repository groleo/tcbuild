From 1f5b5d0711df585d47b1b7c0d63e12b33bde342a Mon Sep 17 00:00:00 2001
From: Jason Jin <Jason.jin@freescale.com>
Date: Fri, 16 Apr 2010 10:42:25 +0800
Subject: [PATCH 08/16] Add dspi driver support on m5441x platform

Test this feature on m5441x platform with SPI flash.

Signed-off-by: Lanttor Guo <lanttor.guo@freescale.com>
---
 arch/m68k/coldfire/m5441x/devices.c   |  167 +++++++++
 arch/m68k/include/asm/mcf5441x_dspi.h |  665 +++++++++++++++++++++++++++++++++
 drivers/dma/mcf_edma.c                |    1 +
 drivers/mtd/devices/m25p80.c          |    6 +-
 drivers/spi/dspi_mcf.c                |   34 ++-
 5 files changed, 862 insertions(+), 11 deletions(-)
 create mode 100644 arch/m68k/include/asm/mcf5441x_dspi.h

diff --git a/arch/m68k/coldfire/m5441x/devices.c b/arch/m68k/coldfire/m5441x/devices.c
index cdeae4d..13c121c 100644
--- a/arch/m68k/coldfire/m5441x/devices.c
+++ b/arch/m68k/coldfire/m5441x/devices.c
@@ -3,6 +3,8 @@
  *
  * Copyright(C) 2010 Freescale Semiconductor, Inc. All rights reserved.
  *
+ * Lanttor.Guo@freescale.com
+ *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
@@ -14,9 +16,11 @@
 #include <linux/platform_device.h>
 #include <linux/fsl_devices.h>
 #include <linux/spi/spi.h>
+#include <linux/spi/flash.h>
 
 #include <linux/interrupt.h>
 #include <linux/init.h>
+#include <linux/mtd/partitions.h>
 #ifdef CONFIG_MMC_SPI
 #include <linux/mmc/host.h>
 #include <linux/spi/mmc_spi.h>
@@ -95,6 +99,166 @@ static struct platform_device sd_mmc_esdhc_device = {
 };
 #endif
 
+#ifdef CONFIG_SPI
+/*
+ * DSPI
+ */
+#define M5441X_DSPI0_MCR	0xFC05C000			/* base */
+
+#define M5441X_DSPI0_IRQ_SOURCE	(31)
+#define M5441X_DSPI0_IRQ_VECTOR	(64 + M5441X_DSPI0_IRQ_SOURCE)
+
+/* number of supported SPI selects */
+#define SPI_NUM_CHIPSELECTS	8
+
+#define M5441X_SPI0_PAR_VAL     (MCF_GPIO_PAR_DSPI0_SCK_DSPI0SCK        | \
+				MCF_GPIO_PAR_DSPI0_SOUT_DSPI0SOUT      | \
+				MCF_GPIO_PAR_DSPI0_SIN_DSPI0SIN        | \
+				MCF_GPIO_PAR_DSPI0_PCS0_DSPI0PCS0)
+
+
+#ifdef CONFIG_MTD_PARTITIONS
+static struct mtd_partition at26df081a_partitions[] = {
+	{
+		.name = "at26df081a",
+		.size = (1024*64*16),
+		.offset = 0x00000000,
+		.mask_flags = 0,
+	}
+};
+#endif
+
+#if defined(CONFIG_MTD_M25P80) || defined(CONFIG_MTD_M25P80_MODULE)
+static struct flash_platform_data at26df081a_platform_data = {
+	.name = "Atmel at26df081a SPI Flash chip",
+#ifdef CONFIG_MTD_PARTITIONS
+	.parts = at26df081a_partitions,
+	.nr_parts = sizeof(at26df081a_partitions)/sizeof(*at26df081a_partitions),
+#endif
+	.type = "at26df081a"
+};
+
+static struct coldfire_dspi_chip at26df081a_chip_info = {
+	.mode = SPI_MODE_0,
+	.bits_per_word = 16,	/* How many bits per word to transfer
+				   per one time (8 or 16) */
+	.void_write_data = 0,
+	.dbr = 0,
+	.pbr = 0,
+	.br = 0,
+	.pcssck = 1,
+	.pasc = 1,
+	.pdt = 1,
+	.cssck = 4,
+	.asc = 4,
+	.dt = 14,
+};
+#endif
+
+#if defined(CONFIG_SPI_SPIDEV) || defined(CONFIG_SPI_SPIDEV_MODULE)
+static struct coldfire_dspi_chip spidev_chip_info = {
+	.bits_per_word = 8,
+};
+#endif
+
+static struct spi_board_info spi_board_info[] = {
+
+#if defined(CONFIG_MTD_M25P80) || defined(CONFIG_MTD_M25P80_MODULE)
+	{
+		.modalias = "m25p80", /* Name of spi driver for this device */
+		.max_speed_hz = 70000000, /* max spi clock in HZ */
+		.bus_num = 1,
+		.chip_select = 0,
+		.platform_data = &at26df081a_platform_data,
+		.controller_data = &at26df081a_chip_info
+	},
+#endif
+#if defined(CONFIG_SPI_SPIDEV) || defined(CONFIG_SPI_SPIDEV_MODULE)
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 16000000, /* max clk (SCK) speed in HZ */
+		.bus_num = 1,
+		.chip_select = 0,		/* CS0 */
+		.controller_data = &spidev_chip_info,
+	},
+#endif
+};
+
+
+static struct coldfire_spi_master coldfire_master_info = {
+	.bus_num = 1,
+	.num_chipselect = SPI_NUM_CHIPSELECTS,
+	.irq_list = 0,		/* not used */
+	.irq_source = M5441X_DSPI0_IRQ_SOURCE,
+	.irq_vector = M5441X_DSPI0_IRQ_VECTOR,
+	.irq_mask = (1 << M5441X_DSPI0_IRQ_SOURCE),
+	.irq_lp = 0x2,		/* irq level */
+	.par_val = M5441X_SPI0_PAR_VAL,
+	.cs_control = NULL,
+};
+
+static struct resource coldfire_spi0_resources[] = {
+	[0] = {
+		.name = "spi-par",
+		.start = (u32)&MCF_GPIO_PAR_DSPI0,	/* PAR_DSPI0 */
+		.end = (u32)&MCF_GPIO_PAR_DSPI0,	/* PAR_DSPI0 */
+		.flags = IORESOURCE_MEM
+	},
+
+	[1] = {
+		.name = "spi-module",
+		.start = M5441X_DSPI0_MCR,	/* DSPI MCR Base */
+		.end = M5441X_DSPI0_MCR + 0xc0,	/* DSPI mem map end */
+		.flags = IORESOURCE_MEM
+	},
+
+	[2] = {
+		.name = "spi-int-level",
+		.start = (u32)&MCF_INTC0_ICR31,	/* ICR start */
+		.end = (u32)&MCF_INTC0_ICR31, 	/* ICR end */
+		.flags = IORESOURCE_MEM
+	},
+
+	[3] = {
+		.name = "spi-int-mask",
+		.start = (u32)&MCF_INTC0_IMRL,	/* IMRL */
+		.end = (u32)&MCF_INTC0_IMRL,		/* IMRL */
+		.flags = IORESOURCE_MEM
+	}
+};
+
+static struct platform_device coldfire_spi0 = {
+	.name = "spi_coldfire",
+	.id = -1,
+	.resource = coldfire_spi0_resources,
+	.num_resources = ARRAY_SIZE(coldfire_spi0_resources),
+	.dev = {
+		.platform_data = &coldfire_master_info,
+	}
+};
+
+/**
+ * m5441x_spi_init - Initialize SPI
+ */
+static int __init m5441x_spi_init(void)
+{
+	int retval;
+
+	/* register device */
+	retval = platform_device_register(&coldfire_spi0);
+	if (retval < 0)
+		goto out;
+
+	/* register board info */
+	if (ARRAY_SIZE(spi_board_info))
+		retval = spi_register_board_info(spi_board_info,
+						 ARRAY_SIZE(spi_board_info));
+
+out:
+	return retval;
+}
+#endif
+
 static int __init mcf5441x_init_devices(void)
 {
 	printk(KERN_INFO "mcf5441x_init_devices: %s.\n", __func__);
@@ -102,6 +266,9 @@ static int __init mcf5441x_init_devices(void)
 #if defined(CONFIG_I2C)
 	mcf5441x_init_i2c();
 #endif
+#if defined(CONFIG_SPI) || defined(CONFIG_SPI_MODULE)
+	m5441x_spi_init();
+#endif
 	return 0;
 }
 arch_initcall(mcf5441x_init_devices);
diff --git a/arch/m68k/include/asm/mcf5441x_dspi.h b/arch/m68k/include/asm/mcf5441x_dspi.h
new file mode 100644
index 0000000..ec8fc40
--- /dev/null
+++ b/arch/m68k/include/asm/mcf5441x_dspi.h
@@ -0,0 +1,665 @@
+/*
+ * Copyright (C) 2010 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Lanttor.Guo@freescale.com
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#ifndef __MCF5441X_DSPI_H__
+#define __MCF5441X_DSPI_H__
+
+/*********************************************************************
+*
+* DMA Serial Peripheral Interface (DSPI)
+*
+*********************************************************************/
+
+/* Register read/write macros */
+/* DSPI Module Configuration Register */
+#define MCF_DSPI_DMCR           MCF_REG32(0xFC05C000)
+/* DSPI Transfer Count Register */
+#define MCF_DSPI_DTCR           MCF_REG32(0xFC05C008)
+/* DSPI Clock and Transfer Attributes Register */
+#define MCF_DSPI_DCTAR0         MCF_REG32(0xFC05C00C)
+/* DSPI Clock and Transfer Attributes Register */
+#define MCF_DSPI_DCTAR1         MCF_REG32(0xFC05C010)
+/* DSPI Clock and Transfer Attributes Register */
+#define MCF_DSPI_DCTAR2         MCF_REG32(0xFC05C014)
+/* DSPI Clock and Transfer Attributes Register */
+#define MCF_DSPI_DCTAR3         MCF_REG32(0xFC05C018)
+/* DSPI Clock and Transfer Attributes Register */
+#define MCF_DSPI_DCTAR4         MCF_REG32(0xFC05C01C)
+/* DSPI Clock and Transfer Attributes Register */
+#define MCF_DSPI_DCTAR5         MCF_REG32(0xFC05C020)
+/* DSPI Clock and Transfer Attributes Register */
+#define MCF_DSPI_DCTAR6         MCF_REG32(0xFC05C024)
+/* DSPI Clock and Transfer Attributes Register */
+#define MCF_DSPI_DCTAR7         MCF_REG32(0xFC05C028
+/* DSPI Status Register */
+#define MCF_DSPI_DSR            MCF_REG32(0xFC05C02C)
+/* DSPI DMA/Interrupt Request Select and Enable Register */
+#define MCF_DSPI_DRSER          MCF_REG32(0xFC05C030)
+/* DSPI Transmit FIFO Register */
+#define MCF_DSPI_DTFR           MCF_REG32(0xFC05C034)
+/* DSPI Receive FIFO Register */
+#define MCF_DSPI_DRFR           MCF_REG32(0xFC05C038)
+/* DSPI Transmit FIFO Debugging Registers */
+#define MCF_DSPI_DTFDR0         MCF_REG32(0xFC05C03C)
+/* DSPI Transmit FIFO Debugging Registers */
+#define MCF_DSPI_DTFDR1         MCF_REG32(0xFC05C040)
+/* DSPI Transmit FIFO Debugging Registers */
+#define MCF_DSPI_DTFDR2         MCF_REG32(0xFC05C044)
+/* DSPI Transmit FIFO Debugging Registers */
+#define MCF_DSPI_DTFDR3         MCF_REG32(0xFC05C048)
+/* DSPI Receive FIFO Debugging Registers */
+#define MCF_DSPI_DRFDR0         MCF_REG32(0xFC05C07C)
+/* DSPI Receive FIFO Debugging Registers */
+#define MCF_DSPI_DRFDR1         MCF_REG32(0xFC05C080)
+/* DSPI Receive FIFO Debugging Registers */
+#define MCF_DSPI_DRFDR2         MCF_REG32(0xFC05C084)
+/* DSPI Receive FIFO Debugging Registers */
+#define MCF_DSPI_DRFDR3         MCF_REG32(0xFC05C088)
+
+
+/* Parameterized register read/write macros for multiple registers */
+/* DSPI Clock and Transfer Attributes Register */
+#define MCF_DSPI_DCTAR(x)       MCF_REG32(0xFC05C00C+((x)*0x004))
+/* DSPI Transmit FIFO Debugging Registers */
+#define MCF_DSPI_DTFDR(x)       MCF_REG32(0xFC05C03C+((x)*0x004))
+/* DSPI Receive FIFO Debugging Registers */
+#define MCF_DSPI_DRFDR(x)       MCF_REG32(0xFC05C07C+((x)*0x004))
+
+/* Bit definitions and macros for DMCR */
+/* Halt -- stops and starts DSPI transfers */
+#define MCF_DSPI_DMCR_HALT          (0x00000001)
+/* Sample point selection */
+#define MCF_DSPI_DMCR_SMPLPT(x)     (((x)&0x00000003)<<8)
+/* Clear receive FIFO */
+#define MCF_DSPI_DMCR_CLRRXF        (0x00000400)
+/* Clear transmit FIFO */
+#define MCF_DSPI_DMCR_CLRTXF        (0x00000800)
+/* Disable receive FIFO */
+#define MCF_DSPI_DMCR_DISRXF        (0x00001000)
+/* Disable transmit FIFO */
+#define MCF_DSPI_DMCR_DISTXF        (0x00002000)
+/* Module Disable */
+#define MCF_DSPI_DMCR_MDIS          (0x00004000)
+/* Peripheral chip-select 0 inactive state */
+#define MCF_DSPI_DMCR_PCSIS0        (0x00010000)
+/* Peripheral chip-select 1 inactive state */
+#define MCF_DSPI_DMCR_PCSIS1        (0x00020000)
+/* Peripheral chip-select 2 inactive state */
+#define MCF_DSPI_DMCR_PCSIS2        (0x00040000)
+/* Peripheral chip-select 3 inactive state */
+#define MCF_DSPI_DMCR_PCSIS3        (0x00080000)
+/* Peripheral chip-select 4 inactive state */
+#define MCF_DSPI_DMCR_PCSIS4        (0x00100000)
+/* Peripheral chip-select 5 inactive state */
+#define MCF_DSPI_DMCR_PCSIS5        (0x00200000)
+/* Peripheral chip-select 6 inactive state */
+#define MCF_DSPI_DMCR_PCSIS6        (0x00400000)
+/* Peripheral chip-select 7 inactive state */
+#define MCF_DSPI_DMCR_PCSIS7        (0x00800000)
+/* Receive FIFO overflow overwrite enable */
+#define MCF_DSPI_DMCR_ROOE          (0x01000000)
+/* Peripheral chip select strobe enable */
+#define MCF_DSPI_DMCR_PCSSE         (0x02000000)
+/* Modified timing format enable */
+#define MCF_DSPI_DMCR_MTFE          (0x04000000)
+/* Freeze */
+#define MCF_DSPI_DMCR_FRZ           (0x08000000)
+/* DSPI configuration */
+#define MCF_DSPI_DMCR_DCONF(x)      (((x)&0x00000003)<<28)
+/* Continuous SCK enable */
+#define MCF_DSPI_DMCR_CONT_SCKE     (0x40000000)
+/* Master/Slave mode select */
+#define MCF_DSPI_DMCR_MSTR          (0x80000000)
+#define MCF_DSPI_DMCR_DCONF_SPI     (0x00000000)
+#define MCF_DSPI_DMCR_PCSIS7_LOW    (0x00000000)
+#define MCF_DSPI_DMCR_PCSIS7_HIGH   (0x00800000)
+#define MCF_DSPI_DMCR_PCSIS6_LOW    (0x00000000)
+#define MCF_DSPI_DMCR_PCSIS6_HIGH   (0x00400000)
+#define MCF_DSPI_DMCR_PCSIS5_LOW    (0x00000000)
+#define MCF_DSPI_DMCR_PCSIS5_HIGH   (0x00200000)
+#define MCF_DSPI_DMCR_PCSIS4_LOW    (0x00000000)
+#define MCF_DSPI_DMCR_PCSIS4_HIGH   (0x00100000)
+#define MCF_DSPI_DMCR_PCSIS3_LOW    (0x00000000)
+#define MCF_DSPI_DMCR_PCSIS3_HIGH   (0x00080000)
+#define MCF_DSPI_DMCR_PCSIS2_LOW    (0x00000000)
+#define MCF_DSPI_DMCR_PCSIS2_HIGH   (0x00040000)
+#define MCF_DSPI_DMCR_PCSIS1_LOW    (0x00000000)
+#define MCF_DSPI_DMCR_PCSIS1_HIGH   (0x00020000)
+#define MCF_DSPI_DMCR_PCSIS0_LOW    (0x00000000)
+#define MCF_DSPI_DMCR_PCSIS0_HIGH   (0x00010000)
+
+/* Bit definitions and macros for DTCR */
+/* SPI transfer count */
+#define MCF_DSPI_DTCR_SPI_TCNT(x)   (((x)&0x0000FFFF)<<16)
+
+/* Bit definitions and macros for DCTAR group */
+/* Baud rate scaler */
+#define MCF_DSPI_DCTAR_BR(x)                (((x)&0x0000000F))
+/* Delay after transfer scaler */
+#define MCF_DSPI_DCTAR_DT(x)                (((x)&0x0000000F)<<4)
+/* After SCK delay scaler */
+#define MCF_DSPI_DCTAR_ASC(x)               (((x)&0x0000000F)<<8)
+/* PCS to SCK delay scaler */
+#define MCF_DSPI_DCTAR_CSSCK(x)             (((x)&0x0000000F)<<12)
+/* Baud rate prescaler */
+#define MCF_DSPI_DCTAR_PBR(x)               (((x)&0x00000003)<<16)
+/* Delay after transfer prescaler */
+#define MCF_DSPI_DCTAR_PDT(x)               (((x)&0x00000003)<<18)
+/* After SCK delay prescaler */
+#define MCF_DSPI_DCTAR_PASC(x)              (((x)&0x00000003)<<20)
+/* PCS to SCK delay prescaler */
+#define MCF_DSPI_DCTAR_PCSSCK(x)            (((x)&0x00000003)<<22)
+/* LSB first enable */
+#define MCF_DSPI_DCTAR_LSBFE                (0x01000000)
+/* Clock phase */
+#define MCF_DSPI_DCTAR_CPHA                 (0x02000000)
+/* Clock polarity */
+#define MCF_DSPI_DCTAR_CPOL                 (0x04000000)
+/* Frame size */
+#define MCF_DSPI_DCTAR_FMSZ(x)              (((x)&0x0000000F)<<27)
+/* Double baud rate */
+#define MCF_DSPI_DCTAR_DBR                  (0x80000000)
+#define MCF_DSPI_DCTAR_CPOL_LOW             (0x00000000)
+#define MCF_DSPI_DCTAR_CPOL_HIGH            (0x04000000)
+#define MCF_DSPI_DCTAR_CPHA_LATCH_RISING    (0x00000000)
+#define MCF_DSPI_DCTAR_CPHA_LATCH_FALLING   (0x02000000)
+#define MCF_DSPI_DCTAR_PCSSCK_1CLK          (0x00000000)
+#define MCF_DSPI_DCTAR_PCSSCK_3CLK          (0x00400000)
+#define MCF_DSPI_DCTAR_PCSSCK_5CLK          (0x00800000)
+#define MCF_DSPI_DCTAR_PCSSCK_7CLK          (0x00C00000)
+#define MCF_DSPI_DCTAR_PASC_1CLK            (0x00000000)
+#define MCF_DSPI_DCTAR_PASC_3CLK            (0x00100000)
+#define MCF_DSPI_DCTAR_PASC_5CLK            (0x00200000)
+#define MCF_DSPI_DCTAR_PASC_7CLK            (0x00300000)
+#define MCF_DSPI_DCTAR_PDT_1CLK             (0x00000000)
+#define MCF_DSPI_DCTAR_PDT_3CLK             (0x00040000)
+#define MCF_DSPI_DCTAR_PDT_5CLK             (0x00080000)
+#define MCF_DSPI_DCTAR_PDT_7CLK             (0x000C0000)
+#define MCF_DSPI_DCTAR_PBR_2CLK             (0x00000000)
+#define MCF_DSPI_DCTAR_PBR_3CLK             (0x00010000)
+#define MCF_DSPI_DCTAR_PBR_5CLK             (0x00020000)
+#define MCF_DSPI_DCTAR_PBR_7CLK             (0x00030000)
+
+/* Bit definitions and macros for DCTAR0 */
+/* Baud rate scaler */
+#define MCF_DSPI_DCTAR0_BR(x)                   (((x)&0x0000000F))
+/* Delay after transfer scaler */
+#define MCF_DSPI_DCTAR0_DT(x)                   (((x)&0x0000000F)<<4)
+/* After SCK delay scaler */
+#define MCF_DSPI_DCTAR0_ASC(x)                  (((x)&0x0000000F)<<8)
+/* PCS to SCK delay scaler */
+#define MCF_DSPI_DCTAR0_CSSCK(x)                (((x)&0x0000000F)<<12)
+/* Baud rate prescaler */
+#define MCF_DSPI_DCTAR0_PBR(x)                  (((x)&0x00000003)<<16)
+/* Delay after transfer prescaler */
+#define MCF_DSPI_DCTAR0_PDT(x)                  (((x)&0x00000003)<<18)
+/* After SCK delay prescaler */
+#define MCF_DSPI_DCTAR0_PASC(x)                 (((x)&0x00000003)<<20)
+/* PCS to SCK delay prescaler */
+#define MCF_DSPI_DCTAR0_PCSSCK(x)               (((x)&0x00000003)<<22)
+/* LSB first enable */
+#define MCF_DSPI_DCTAR0_LSBFE                   (0x01000000)
+/* Clock phase */
+#define MCF_DSPI_DCTAR0_CPHA                    (0x02000000)
+/* Clock polarity */
+#define MCF_DSPI_DCTAR0_CPOL                    (0x04000000)
+/* Frame size */
+#define MCF_DSPI_DCTAR0_FMSZ(x)                 (((x)&0x0000000F)<<27)
+/* Double baud rate */
+#define MCF_DSPI_DCTAR0_DBR                     (0x80000000)
+#define MCF_DSPI_DCTAR0_CPOL_LOW                (0x00000000)
+#define MCF_DSPI_DCTAR0_CPOL_HIGH               (0x04000000)
+#define MCF_DSPI_DCTAR0_CPHA_LATCH_RISING       (0x00000000)
+#define MCF_DSPI_DCTAR0_CPHA_LATCH_FALLING      (0x02000000)
+#define MCF_DSPI_DCTAR0_PCSSCK_1CLK             (0x00000000)
+#define MCF_DSPI_DCTAR0_PCSSCK_3CLK             (0x00400000)
+#define MCF_DSPI_DCTAR0_PCSSCK_5CLK             (0x00800000)
+#define MCF_DSPI_DCTAR0_PCSSCK_7CLK             (0x00C00000)
+#define MCF_DSPI_DCTAR0_PASC_1CLK               (0x00000000)
+#define MCF_DSPI_DCTAR0_PASC_3CLK               (0x00100000)
+#define MCF_DSPI_DCTAR0_PASC_5CLK               (0x00200000)
+#define MCF_DSPI_DCTAR0_PASC_7CLK               (0x00300000)
+#define MCF_DSPI_DCTAR0_PDT_1CLK                (0x00000000)
+#define MCF_DSPI_DCTAR0_PDT_3CLK                (0x00040000)
+#define MCF_DSPI_DCTAR0_PDT_5CLK                (0x00080000)
+#define MCF_DSPI_DCTAR0_PDT_7CLK                (0x000C0000)
+#define MCF_DSPI_DCTAR0_PBR_2CLK                (0x00000000)
+#define MCF_DSPI_DCTAR0_PBR_3CLK                (0x00010000)
+#define MCF_DSPI_DCTAR0_PBR_5CLK                (0x00020000)
+#define MCF_DSPI_DCTAR0_PBR_7CLK                (0x00030000)
+
+/* Bit definitions and macros for DCTAR1 */
+/* Baud rate scaler */
+#define MCF_DSPI_DCTAR1_BR(x)       (((x)&0x0000000F))
+/* Delay after transfer scaler */
+#define MCF_DSPI_DCTAR1_DT(x)       (((x)&0x0000000F)<<4)
+/* After SCK delay scaler */
+#define MCF_DSPI_DCTAR1_ASC(x)      (((x)&0x0000000F)<<8)
+/* PCS to SCK delay scaler */
+#define MCF_DSPI_DCTAR1_CSSCK(x)    (((x)&0x0000000F)<<12)
+/* Baud rate prescaler */
+#define MCF_DSPI_DCTAR1_PBR(x)      (((x)&0x00000003)<<16)
+/* Delay after transfer prescaler */
+#define MCF_DSPI_DCTAR1_PDT(x)      (((x)&0x00000003)<<18)
+/* After SCK delay prescaler */
+#define MCF_DSPI_DCTAR1_PASC(x)     (((x)&0x00000003)<<20)
+/* PCS to SCK delay prescaler */
+#define MCF_DSPI_DCTAR1_PCSSCK(x)   (((x)&0x00000003)<<22)
+/* LSB first enable */
+#define MCF_DSPI_DCTAR1_LSBFE       (0x01000000)
+/* Clock phase */
+#define MCF_DSPI_DCTAR1_CPHA        (0x02000000)
+/* Clock polarity */
+#define MCF_DSPI_DCTAR1_CPOL        (0x04000000)
+/* Frame size */
+#define MCF_DSPI_DCTAR1_FMSZ(x)     (((x)&0x0000000F)<<27)
+/* Double baud rate */
+#define MCF_DSPI_DCTAR1_DBR         (0x80000000)
+
+
+/* Bit definitions and macros for DCTAR2 */
+/* Baud rate scaler */
+#define MCF_DSPI_DCTAR2_BR(x)       (((x)&0x0000000F))
+/* Delay after transfer scaler */
+#define MCF_DSPI_DCTAR2_DT(x)       (((x)&0x0000000F)<<4)
+/* After SCK delay scaler */
+#define MCF_DSPI_DCTAR2_ASC(x)      (((x)&0x0000000F)<<8)
+/* PCS to SCK delay scaler */
+#define MCF_DSPI_DCTAR2_CSSCK(x)    (((x)&0x0000000F)<<12)
+/* Baud rate prescaler */
+#define MCF_DSPI_DCTAR2_PBR(x)      (((x)&0x00000003)<<16)
+/* Delay after transfer prescaler */
+#define MCF_DSPI_DCTAR2_PDT(x)      (((x)&0x00000003)<<18)
+/* After SCK delay prescaler */
+#define MCF_DSPI_DCTAR2_PASC(x)     (((x)&0x00000003)<<20)
+/* PCS to SCK delay prescaler */
+#define MCF_DSPI_DCTAR2_PCSSCK(x)   (((x)&0x00000003)<<22)
+/* LSB first enable */
+#define MCF_DSPI_DCTAR2_LSBFE       (0x01000000)
+/* Clock phase */
+#define MCF_DSPI_DCTAR2_CPHA        (0x02000000)
+/* Clock polarity */
+#define MCF_DSPI_DCTAR2_CPOL        (0x04000000)
+/* Frame size */
+#define MCF_DSPI_DCTAR2_FMSZ(x)     (((x)&0x0000000F)<<27)
+/* Double baud rate */
+#define MCF_DSPI_DCTAR2_DBR         (0x80000000)
+
+/* Bit definitions and macros for DCTAR3 */
+/* Baud rate scaler */
+#define MCF_DSPI_DCTAR3_BR(x)       (((x)&0x0000000F))
+/* Delay after transfer scaler */
+#define MCF_DSPI_DCTAR3_DT(x)       (((x)&0x0000000F)<<4)
+/* After SCK delay scaler */
+#define MCF_DSPI_DCTAR3_ASC(x)      (((x)&0x0000000F)<<8)
+/* PCS to SCK delay scaler */
+#define MCF_DSPI_DCTAR3_CSSCK(x)    (((x)&0x0000000F)<<12)
+/* Baud rate prescaler */
+#define MCF_DSPI_DCTAR3_PBR(x)      (((x)&0x00000003)<<16)
+/* Delay after transfer prescaler */
+#define MCF_DSPI_DCTAR3_PDT(x)      (((x)&0x00000003)<<18)
+/* After SCK delay prescaler */
+#define MCF_DSPI_DCTAR3_PASC(x)     (((x)&0x00000003)<<20)
+/* PCS to SCK delay prescaler */
+#define MCF_DSPI_DCTAR3_PCSSCK(x)   (((x)&0x00000003)<<22)
+/* LSB first enable */
+#define MCF_DSPI_DCTAR3_LSBFE       (0x01000000)
+/* Clock phase */
+#define MCF_DSPI_DCTAR3_CPHA        (0x02000000)
+/* Clock polarity */
+#define MCF_DSPI_DCTAR3_CPOL        (0x04000000)
+/* Frame size */
+#define MCF_DSPI_DCTAR3_FMSZ(x)     (((x)&0x0000000F)<<27)
+/* Double baud rate */
+#define MCF_DSPI_DCTAR3_DBR         (0x80000000)
+
+/* Bit definitions and macros for DCTAR4 */
+/* Baud rate scaler */
+#define MCF_DSPI_DCTAR4_BR(x)       (((x)&0x0000000F))
+/* Delay after transfer scaler */
+#define MCF_DSPI_DCTAR4_DT(x)       (((x)&0x0000000F)<<4)
+/* After SCK delay scaler */
+#define MCF_DSPI_DCTAR4_ASC(x)      (((x)&0x0000000F)<<8)
+/* PCS to SCK delay scaler */
+#define MCF_DSPI_DCTAR4_CSSCK(x)    (((x)&0x0000000F)<<12)
+/* Baud rate prescaler */
+#define MCF_DSPI_DCTAR4_PBR(x)      (((x)&0x00000003)<<16)
+/* Delay after transfer prescaler */
+#define MCF_DSPI_DCTAR4_PDT(x)      (((x)&0x00000003)<<18)
+/* After SCK delay prescaler */
+#define MCF_DSPI_DCTAR4_PASC(x)     (((x)&0x00000003)<<20)
+/* PCS to SCK delay prescaler */
+#define MCF_DSPI_DCTAR4_PCSSCK(x)   (((x)&0x00000003)<<22)
+/* LSB first enable */
+#define MCF_DSPI_DCTAR4_LSBFE       (0x01000000)
+/* Clock phase */
+#define MCF_DSPI_DCTAR4_CPHA        (0x02000000)
+/* Clock polarity */
+#define MCF_DSPI_DCTAR4_CPOL        (0x04000000)
+/* Frame size */
+#define MCF_DSPI_DCTAR4_FMSZ(x)     (((x)&0x0000000F)<<27)
+/* Double baud rate */
+#define MCF_DSPI_DCTAR4_DBR         (0x80000000)
+
+/* Bit definitions and macros for DCTAR5 */
+/* Baud rate scaler */
+#define MCF_DSPI_DCTAR5_BR(x)       (((x)&0x0000000F))
+/* Delay after transfer scaler */
+#define MCF_DSPI_DCTAR5_DT(x)       (((x)&0x0000000F)<<4)
+/* After SCK delay scaler */
+#define MCF_DSPI_DCTAR5_ASC(x)      (((x)&0x0000000F)<<8)
+/* PCS to SCK delay scaler */
+#define MCF_DSPI_DCTAR5_CSSCK(x)    (((x)&0x0000000F)<<12)
+/* Baud rate prescaler */
+#define MCF_DSPI_DCTAR5_PBR(x)      (((x)&0x00000003)<<16)
+/* Delay after transfer prescaler */
+#define MCF_DSPI_DCTAR5_PDT(x)      (((x)&0x00000003)<<18)
+/* After SCK delay prescaler */
+#define MCF_DSPI_DCTAR5_PASC(x)     (((x)&0x00000003)<<20)
+/* PCS to SCK delay prescaler */
+#define MCF_DSPI_DCTAR5_PCSSCK(x)   (((x)&0x00000003)<<22)
+/* LSB first enable */
+#define MCF_DSPI_DCTAR5_LSBFE       (0x01000000)
+/* Clock phase */
+#define MCF_DSPI_DCTAR5_CPHA        (0x02000000)
+/* Clock polarity */
+#define MCF_DSPI_DCTAR5_CPOL        (0x04000000)
+/* Frame size */
+#define MCF_DSPI_DCTAR5_FMSZ(x)     (((x)&0x0000000F)<<27)
+/* Double baud rate */
+#define MCF_DSPI_DCTAR5_DBR         (0x80000000)
+
+/* Bit definitions and macros for DCTAR6 */
+/* Baud rate scaler */
+#define MCF_DSPI_DCTAR6_BR(x)       (((x)&0x0000000F))
+/* Delay after transfer scaler */
+#define MCF_DSPI_DCTAR6_DT(x)       (((x)&0x0000000F)<<4)
+/* After SCK delay scaler */
+#define MCF_DSPI_DCTAR6_ASC(x)      (((x)&0x0000000F)<<8)
+/* PCS to SCK delay scaler */
+#define MCF_DSPI_DCTAR6_CSSCK(x)    (((x)&0x0000000F)<<12)
+/* Baud rate prescaler */
+#define MCF_DSPI_DCTAR6_PBR(x)      (((x)&0x00000003)<<16)
+/* Delay after transfer prescaler */
+#define MCF_DSPI_DCTAR6_PDT(x)      (((x)&0x00000003)<<18)
+/* After SCK delay prescaler */
+#define MCF_DSPI_DCTAR6_PASC(x)     (((x)&0x00000003)<<20)
+/* PCS to SCK delay prescaler */
+#define MCF_DSPI_DCTAR6_PCSSCK(x)   (((x)&0x00000003)<<22)
+/* LSB first enable */
+#define MCF_DSPI_DCTAR6_LSBFE       (0x01000000)
+/* Clock phase */
+#define MCF_DSPI_DCTAR6_CPHA        (0x02000000)
+/* Clock polarity */
+#define MCF_DSPI_DCTAR6_CPOL        (0x04000000)
+/* Frame size */
+#define MCF_DSPI_DCTAR6_FMSZ(x)     (((x)&0x0000000F)<<27)
+/* Double baud rate */
+#define MCF_DSPI_DCTAR6_DBR         (0x80000000)
+
+/* Bit definitions and macros for DCTAR7 */
+/* Baud rate scaler */
+#define MCF_DSPI_DCTAR7_BR(x)       (((x)&0x0000000F))
+/* Delay after transfer scaler */
+#define MCF_DSPI_DCTAR7_DT(x)       (((x)&0x0000000F)<<4)
+/* After SCK delay scaler */
+#define MCF_DSPI_DCTAR7_ASC(x)      (((x)&0x0000000F)<<8)
+/* PCS to SCK delay scaler */
+#define MCF_DSPI_DCTAR7_CSSCK(x)    (((x)&0x0000000F)<<12)
+/* Baud rate prescaler */
+#define MCF_DSPI_DCTAR7_PBR(x)      (((x)&0x00000003)<<16)
+/* Delay after transfer prescaler */
+#define MCF_DSPI_DCTAR7_PDT(x)      (((x)&0x00000003)<<18)
+/* After SCK delay prescaler */
+#define MCF_DSPI_DCTAR7_PASC(x)     (((x)&0x00000003)<<20)
+/* PCS to SCK delay prescaler */
+#define MCF_DSPI_DCTAR7_PCSSCK(x)   (((x)&0x00000003)<<22)
+/* LSB first enable */
+#define MCF_DSPI_DCTAR7_LSBFE       (0x01000000)
+/* Clock phase */
+#define MCF_DSPI_DCTAR7_CPHA        (0x02000000)
+/* Clock polarity */
+#define MCF_DSPI_DCTAR7_CPOL        (0x04000000)
+/* Frame size */
+#define MCF_DSPI_DCTAR7_FMSZ(x)     (((x)&0x0000000F)<<27)
+/* Double baud rate */
+#define MCF_DSPI_DCTAR7_DBR         (0x80000000)
+
+/* Bit definitions and macros for DSR */
+/* Receive next pointer */
+#define MCF_DSPI_DSR_RXPTR(x)   (((x)&0x0000000F))
+/* Receive FIFO counter */
+#define MCF_DSPI_DSR_RXCTR(x)   (((x)&0x0000000F)<<4)
+/* Transmit next pointer */
+#define MCF_DSPI_DSR_TXPTR(x)   (((x)&0x0000000F)<<8)
+/* Transmit FIFO counter */
+#define MCF_DSPI_DSR_TXCTR(x)   (((x)&0x0000000F)<<12)
+/* Receive FIFO drain flag */
+#define MCF_DSPI_DSR_RFDF       (0x00020000)
+/* Receive FIFO overflow flag */
+#define MCF_DSPI_DSR_RFOF       (0x00080000)
+/* Transmit FIFO fill flag */
+#define MCF_DSPI_DSR_TFFF       (0x02000000)
+/* Transmit FIFO underflow flag */
+#define MCF_DSPI_DSR_TFUF       (0x08000000)
+/* End of queue flag */
+#define MCF_DSPI_DSR_EOQF       (0x10000000)
+/* Tx and Rx status (enabled | disabled) */
+#define MCF_DSPI_DSR_TXRXS      (0x40000000)
+/* Transfer complete flag */
+#define MCF_DSPI_DSR_TCF        (0x80000000)
+
+/* Bit definitions and macros for DRSER */
+/* Receive FIFO drain DMA or interrupt select */
+#define MCF_DSPI_DRSER_RFDFS    (0x00010000)
+/* Receive FIFO drain request enable */
+#define MCF_DSPI_DRSER_RFDFE    (0x00020000)
+/* Receive FIFO overflow request enable */
+#define MCF_DSPI_DRSER_RFOFE    (0x00080000)
+/* Transmit FIFO fill DMA or interrupt select */
+#define MCF_DSPI_DRSER_TFFFS    (0x01000000)
+/* Transmit FIFO fill request enable */
+#define MCF_DSPI_DRSER_TFFFE    (0x02000000)
+/* Transmit FIFO underflow request enable */
+#define MCF_DSPI_DRSER_TFUFE    (0x08000000)
+/* DSPI finished request enable */
+#define MCF_DSPI_DRSER_EOQFE    (0x10000000)
+/* Transmission complete request enable */
+#define MCF_DSPI_DRSER_TCFE     (0x80000000)
+
+/* Bit definitions and macros for DTFR */
+/* Transmit data */
+#define MCF_DSPI_DTFR_TXDATA(x)     (((x)&0x0000FFFF))
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFR_PCS0          (0x00010000)
+/* Peripheral chip select 1 */
+#define MCF_DSPI_DTFR_PCS1          (0x00020000)
+/* Peripheral chip select 2 */
+#define MCF_DSPI_DTFR_PCS2          (0x00040000)
+/* Peripheral chip select 3 */
+#define MCF_DSPI_DTFR_PCS3          (0x00080000)
+/* Peripheral chip select 4 */
+#define MCF_DSPI_DTFR_PCS4          (0x00100000)
+/* Peripheral chip select 5 */
+#define MCF_DSPI_DTFR_PCS5          (0x00200000)
+/* Peripheral chip select 6 */
+#define MCF_DSPI_DTFR_PCS6          (0x00400000)
+/* Peripheral chip select 7 */
+#define MCF_DSPI_DTFR_PCS7          (0x00800000)
+/* Clear SPI transfer counter */
+#define MCF_DSPI_DTFR_CTCNT         (0x04000000)
+/* End of queue */
+#define MCF_DSPI_DTFR_EOQ           (0x08000000)
+/* Clock and transfer attributes select */
+#define MCF_DSPI_DTFR_CTAS(x)       (((x)&0x00000007)<<28)
+/* Continuous peripheral chip-select enable */
+#define MCF_DSPI_DTFR_CONT          (0x80000000)
+
+/* Bit definitions and macros for DRFR */
+/* Receive data */
+#define MCF_DSPI_DRFR_RXDATA(x)     (((x)&0x0000FFFF))
+
+/* Bit definitions and macros for DTFDR group */
+/* Transmit data */
+#define MCF_DSPI_DTFDR_TXDATA(x)    (((x)&0x0000FFFF))
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR_PCS0         (0x00010000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR_PCS1         (0x00020000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR_PCS2         (0x00040000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR_PCS3         (0x00080000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR_PCS4         (0x00100000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR_PCS5         (0x00200000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR_PCS6         (0x00400000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR_PCS7         (0x00800000)
+/* Clear SPI transfer counter */
+#define MCF_DSPI_DTFDR_CTCNT        (0x04000000)
+/* End of queue */
+#define MCF_DSPI_DTFDR_EOQ          (0x08000000)
+/* Clock and transfer attributes select */
+#define MCF_DSPI_DTFDR_CTAS(x)      (((x)&0x00000007)<<28)
+/* Continuous peripheral chip-select enable */
+#define MCF_DSPI_DTFDR_CONT         (0x80000000)
+
+/* Bit definitions and macros for DTFDR0 */
+/* Transmit data */
+#define MCF_DSPI_DTFDR0_TXDATA(x)   (((x)&0x0000FFFF))
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR0_PCS0        (0x00010000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR0_PCS1        (0x00020000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR0_PCS2        (0x00040000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR0_PCS3        (0x00080000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR0_PCS4        (0x00100000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR0_PCS5        (0x00200000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR0_PCS6        (0x00400000)
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR0_PCS7        (0x00800000)
+/* Clear SPI transfer counter */
+#define MCF_DSPI_DTFDR0_CTCNT       (0x04000000)
+/* End of queue */
+#define MCF_DSPI_DTFDR0_EOQ         (0x08000000)
+/* Clock and transfer attributes select */
+#define MCF_DSPI_DTFDR0_CTAS(x)     (((x)&0x00000007)<<28)
+/* Continuous peripheral chip-select enable */
+#define MCF_DSPI_DTFDR0_CONT        (0x80000000)
+/* Bit definitions and macros for DTFDR1 */
+/* Transmit data */
+#define MCF_DSPI_DTFDR1_TXDATA(x)   (((x)&0x0000FFFF))
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR1_PCS0        (0x00010000)
+/* Peripheral chip select 1 */
+#define MCF_DSPI_DTFDR1_PCS1        (0x00020000)
+/* Peripheral chip select 2 */
+#define MCF_DSPI_DTFDR1_PCS2        (0x00040000)
+/* Peripheral chip select 3 */
+#define MCF_DSPI_DTFDR1_PCS3        (0x00080000)
+/* Peripheral chip select 4 */
+#define MCF_DSPI_DTFDR1_PCS4        (0x00100000)
+/* Peripheral chip select 5 */
+#define MCF_DSPI_DTFDR1_PCS5        (0x00200000)
+/* Peripheral chip select 6 */
+#define MCF_DSPI_DTFDR1_PCS6        (0x00400000)
+/* Peripheral chip select 7 */
+#define MCF_DSPI_DTFDR1_PCS7        (0x00800000)
+/* Clear SPI transfer counter */
+#define MCF_DSPI_DTFDR1_CTCNT       (0x04000000)
+/* End of queue */
+#define MCF_DSPI_DTFDR1_EOQ         (0x08000000)
+/* Clock and transfer attributes select */
+#define MCF_DSPI_DTFDR1_CTAS(x)     (((x)&0x00000007)<<28)
+/* Continuous peripheral chip-select enable */
+#define MCF_DSPI_DTFDR1_CONT        (0x80000000)
+
+/* Bit definitions and macros for DTFDR2 */
+#define MCF_DSPI_DTFDR2_TXDATA(x)   (((x)&0x0000FFFF))
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR2_PCS0        (0x00010000)
+/* Peripheral chip select 1 */
+#define MCF_DSPI_DTFDR2_PCS1        (0x00020000)
+/* Peripheral chip select 2 */
+#define MCF_DSPI_DTFDR2_PCS2        (0x00040000)
+/* Peripheral chip select 3 */
+#define MCF_DSPI_DTFDR2_PCS3        (0x00080000)
+/* Peripheral chip select 4 */
+#define MCF_DSPI_DTFDR2_PCS4        (0x00100000)
+/* Peripheral chip select 5 */
+#define MCF_DSPI_DTFDR2_PCS5        (0x00200000)
+/* Peripheral chip select 6 */
+#define MCF_DSPI_DTFDR2_PCS6        (0x00400000)
+/* Peripheral chip select 7 */
+#define MCF_DSPI_DTFDR2_PCS7        (0x00800000)
+/* Clear SPI transfer counter */
+#define MCF_DSPI_DTFDR2_CTCNT       (0x04000000)
+/* End of queue */
+#define MCF_DSPI_DTFDR2_EOQ         (0x08000000)
+/* Clock and transfer attributes select */
+#define MCF_DSPI_DTFDR2_CTAS(x)     (((x)&0x00000007)<<28)
+/* Continuous peripheral chip-select enable */
+#define MCF_DSPI_DTFDR2_CONT        (0x80000000)
+
+/* Bit definitions and macros for DTFDR3 */
+/* Transmit data */
+#define MCF_DSPI_DTFDR3_TXDATA(x)   (((x)&0x0000FFFF))
+/* Peripheral chip select 0 */
+#define MCF_DSPI_DTFDR3_PCS0        (0x00010000)
+/* Peripheral chip select 1 */
+#define MCF_DSPI_DTFDR3_PCS1        (0x00020000)
+/* Peripheral chip select 2 */
+#define MCF_DSPI_DTFDR3_PCS2        (0x00040000)
+/* Peripheral chip select 3 */
+#define MCF_DSPI_DTFDR3_PCS3        (0x00080000)
+/* Peripheral chip select 4 */
+#define MCF_DSPI_DTFDR3_PCS4        (0x00100000)
+/* Peripheral chip select 5 */
+#define MCF_DSPI_DTFDR3_PCS5        (0x00200000)
+/* Peripheral chip select 6 */
+#define MCF_DSPI_DTFDR3_PCS6        (0x00400000)
+/* Peripheral chip select 7 */
+#define MCF_DSPI_DTFDR3_PCS7        (0x00800000)
+/* Clear SPI transfer counter */
+#define MCF_DSPI_DTFDR3_CTCNT       (0x04000000)
+/* End of queue */
+#define MCF_DSPI_DTFDR3_EOQ         (0x08000000)
+/* Clock and transfer attributes select */
+#define MCF_DSPI_DTFDR3_CTAS(x)     (((x)&0x00000007)<<28)
+/* Continuous peripheral chip-select enable */
+#define MCF_DSPI_DTFDR3_CONT        (0x80000000)
+
+/* Bit definitions and macros for DRFDR group */
+#define MCF_DSPI_DRFDR_RXDATA(x)    (((x)&0x0000FFFF))
+
+/* Bit definitions and macros for DRFDR0 */
+#define MCF_DSPI_DRFDR0_RXDATA(x)   (((x)&0x0000FFFF))
+
+/* Bit definitions and macros for DRFDR1 */
+#define MCF_DSPI_DRFDR1_RXDATA(x)   (((x)&0x0000FFFF))
+
+/* Bit definitions and macros for DRFDR2 */
+#define MCF_DSPI_DRFDR2_RXDATA(x)   (((x)&0x0000FFFF))
+
+/* Bit definitions and macros for DRFDR3 */
+#define MCF_DSPI_DRFDR3_RXDATA(x)   (((x)&0x0000FFFF))
+
+/********************************************************************/
+
+#endif /* __MCF5441X_DSPI_H__ */
diff --git a/drivers/dma/mcf_edma.c b/drivers/dma/mcf_edma.c
index 4a6b94f..17e55f0 100755
--- a/drivers/dma/mcf_edma.c
+++ b/drivers/dma/mcf_edma.c
@@ -884,6 +884,7 @@ mcf_edma_init(void)
 		mcf_edma_devp->dma_interrupt_handlers[i].allocated = 0;
 		mcf_edma_devp->dma_interrupt_handlers[i].lock = NULL;
 		mcf_edma_devp->dma_interrupt_handlers[i].device_id = NULL;
+		MCF_EDMA_TCD_CSR(i) = 0x0000;
 	}
 
 	/* register char device */
diff --git a/drivers/mtd/devices/m25p80.c b/drivers/mtd/devices/m25p80.c
index 7c3fc76..ef3e93f 100644
--- a/drivers/mtd/devices/m25p80.c
+++ b/drivers/mtd/devices/m25p80.c
@@ -670,6 +670,10 @@ static int __devinit m25p_probe(struct spi_device *spi)
 	flash->mtd.write = m25p80_write;
 
 	/* prefer "small sector" erase if possible */
+#if defined(CONFIG_M5441X)
+		flash->erase_opcode = OPCODE_SE;
+		flash->mtd.erasesize = info->sector_size;
+#else
 	if (info->flags & SECT_4K) {
 		flash->erase_opcode = OPCODE_BE_4K;
 		flash->mtd.erasesize = 4096;
@@ -677,7 +681,7 @@ static int __devinit m25p_probe(struct spi_device *spi)
 		flash->erase_opcode = OPCODE_SE;
 		flash->mtd.erasesize = info->sector_size;
 	}
-
+#endif
 	dev_info(&spi->dev, "%s (%lld Kbytes)\n", info->name,
 			(long long)flash->mtd.size >> 10);
 
diff --git a/drivers/spi/dspi_mcf.c b/drivers/spi/dspi_mcf.c
index 28f4d54..eeac592 100644
--- a/drivers/spi/dspi_mcf.c
+++ b/drivers/spi/dspi_mcf.c
@@ -1,11 +1,12 @@
 /*
  * dspi_mcf.c - DSPI controller for ColdFire processors
  *
- * Copyright 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2008-2010 Freescale Semiconductor, Inc. All Rights Reserved.
  * Author: Matt Waddel Matt.Waddel@freescale.com
  * 	   Kurt Mahan kmahan@freescale.com
  *	   Wang Huan <b18965@freescale.com>
  *	   Jingchang Lu <b22599@freescale.com>
+ *	   Lanttor.Guo@freescale.com
  *
  * Based on spi_coldfire.c
  *
@@ -65,6 +66,11 @@
 #if defined(CONFIG_SPI_COLDFIRE_DSPI_EDMA)
 	#include <asm/mcf5445x_edma.h>
 #endif
+#elif defined(CONFIG_M5441X)
+#include <asm/mcf5441x_dspi.h>
+#if defined(CONFIG_SPI_COLDFIRE_DSPI_EDMA)
+#include <asm/mcf5441x_edma.h>
+#endif
 #endif
 
 #if defined(CONFIG_M547X_8X)
@@ -76,8 +82,13 @@
 #include <asm/mcf_edma.h>
 #define SPI_DSPI_EDMA
 #define EDMA_BUFSIZE_KMALLOC	(DSPI_FIFO_SIZE*4)
+#if defined(CONFIG_M5445X)
 #define DSPI_DMA_RX_TCD		MCF_EDMA_CHAN_DSPI_RX
 #define DSPI_DMA_TX_TCD 	MCF_EDMA_CHAN_DSPI_TX
+#elif defined(CONFIG_M5441X)
+#define DSPI_DMA_RX_TCD		MCF_EDMA_CHAN_DSPI0_RX
+#define DSPI_DMA_TX_TCD 	MCF_EDMA_CHAN_DSPI0_TX
+#endif
 
 #define NEW_DMA_METHOD
 
@@ -1273,16 +1284,9 @@ static int coldfire_spi_probe(struct platform_device *pdev)
 		goto out_error_irq_alloc;
 	}
 
-	/* Register with the SPI framework */
-	platform_set_drvdata(pdev, drv_data);
-	status = spi_register_master(master);
-	if (status != 0) {
-		dev_err(&pdev->dev, "Problem registering DSPI master\n");
-		status = -EINVAL;
-		goto out_error_queue_alloc;
-	}
-
 #if defined(SPI_DSPI_EDMA)
+	DBG("MCF edma request channel for SPI\n");
+
 	if (mcf_edma_request_channel(DSPI_DMA_TX_TCD,
 				     edma_tx_handler,
 				     NULL,
@@ -1315,6 +1319,16 @@ static int coldfire_spi_probe(struct platform_device *pdev)
 
 	dspi_drv_data = drv_data;
 #endif
+
+	/* Register with the SPI framework */
+	platform_set_drvdata(pdev, drv_data);
+	status = spi_register_master(master);
+	if (status != 0) {
+		dev_err(&pdev->dev, "Problem registering DSPI master\n");
+		status = -EINVAL;
+		goto out_error_queue_alloc;
+	}
+
 #ifdef NEW_DMA_METHOD
 	printk(KERN_INFO "Coldfire DSPI: Using Highspeed eDMA transfer method!\n");
 #endif
-- 
1.6.4

