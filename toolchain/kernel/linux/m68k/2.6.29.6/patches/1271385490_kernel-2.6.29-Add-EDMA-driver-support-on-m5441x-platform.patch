From 84f31e8c1def3b8a5ea5fe8ed6ef7576177e1d61 Mon Sep 17 00:00:00 2001
From: Jason Jin <Jason.jin@freescale.com>
Date: Fri, 16 Apr 2010 10:38:10 +0800
Subject: [PATCH 07/16] Add EDMA driver support on m5441x platform

There are following new features on m5441x:
support 64 channels;
group priority setting;

Signed-off-by: Lanttor Guo <lanttor.guo@freescale.com>
---
 arch/m68k/include/asm/mcf5441x_edma.h |  303 +++++++++++++++++++++++++++++++++
 arch/m68k/include/asm/mcf_edma.h      |   39 ++++-
 drivers/dma/Kconfig                   |    2 +-
 drivers/dma/mcf_edma.c                |  188 +++++++++++++++++++--
 drivers/dma/mcf_edma_test.c           |   13 +-
 5 files changed, 519 insertions(+), 26 deletions(-)
 create mode 100644 arch/m68k/include/asm/mcf5441x_edma.h

diff --git a/arch/m68k/include/asm/mcf5441x_edma.h b/arch/m68k/include/asm/mcf5441x_edma.h
new file mode 100644
index 0000000..116ef09
--- /dev/null
+++ b/arch/m68k/include/asm/mcf5441x_edma.h
@@ -0,0 +1,303 @@
+/* mcf5441x_edma.h
+ *
+ * Copyright (C) 2010 Freescale Semiconductor, Inc. All rights reserved.
+ * Lanttor.Guo@freescale.com
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+#ifndef __MCF5441X_EDMA_H__
+#define __MCF5441X_EDMA_H__
+
+/*
+ * Enhanced DMA (EDMA)
+ */
+
+/* Channels */
+#define MCF_EDMA_CHAN_DREQ0	0	/* External DMA request 0 */
+#define MCF_EDMA_CHAN_DREQ1	1	/* External DMA request 1 */
+#define MCF_EDMA_CHAN_UART0_RX	2	/* UART0 Receive */
+#define MCF_EDMA_CHAN_UART0_TX	3	/* UART0 Transmit */
+#define MCF_EDMA_CHAN_UART1_RX	4	/* UART1 Receive */
+#define MCF_EDMA_CHAN_UART1_TX	5	/* UART1 Transmit */
+#define MCF_EDMA_CHAN_UART2_RX	6	/* UART2 Receive */
+#define MCF_EDMA_CHAN_UART2_TX	7	/* UART2 Transmit */
+#define MCF_EDMA_CHAN_TIMER0	8	/* Timer 0 / SSI0 Rx */
+#define MCF_EDMA_CHAN_TIMER1	9	/* Timer 1 / SSI1 Rx */
+#define MCF_EDMA_CHAN_TIMER2	10	/* Timer 2 / SSI0 Tx */
+#define MCF_EDMA_CHAN_TIMER3	11	/* Timer 3 / SSI1 Tx */
+#define MCF_EDMA_CHAN_DSPI0_RX	12	/* DSPI0 Receive */
+#define MCF_EDMA_CHAN_DSPI0_TX	13	/* DSPI0 Transmit */
+#define MCF_EDMA_CHAN_DSPI1_RX	14	/* DSPI1 Receive */
+#define MCF_EDMA_CHAN_DSPI1_TX	15	/* DSPI1 Transmit */
+#define MCF_EDMA_CHAN_UART3_RX	16	/* UART3 Receive */
+#define MCF_EDMA_CHAN_UART3_TX	17	/* UART3 Transmit */
+#define MCF_EDMA_CHAN_UART4_RX	18	/* UART4 Receive */
+#define MCF_EDMA_CHAN_UART4_TX	19	/* UART4 Transmit */
+#define MCF_EDMA_CHAN_UART5_RX	20	/* UART5 Receive */
+#define MCF_EDMA_CHAN_UART5_TX	21	/* UART5 Transmit */
+#define MCF_EDMA_CHAN_UART6_RX	22	/* UART6 Receive */
+#define MCF_EDMA_CHAN_UART6_TX	23 	/* UART6 Transmit */
+#define MCF_EDMA_CHAN_I2C0	24	/* I2C0 */
+#define MCF_EDMA_CHAN_I2C1	25	/* I2C1 */
+#define MCF_EDMA_CHAN_I2C2	26	/* I2C2 */
+#define MCF_EDMA_CHAN_I2C3	27	/* I2C3 */
+#define MCF_EDMA_CHAN_DSPI2_RX	28	/* DSPI2 Receive */
+#define MCF_EDMA_CHAN_DSPI2_TX	29	/* DSPI2 Transmit */
+#define MCF_EDMA_CHAN_N0	30	/* Available for software */
+#define MCF_EDMA_CHAN_N1	31	/* Available for software */
+#define MCF_EDMA_CHAN_UART7_RX	32	/* UART7 Receive */
+#define MCF_EDMA_CHAN_UART7_TX	33	/* UART7 Transmit */
+#define MCF_EDMA_CHAN_UART8_RX	34	/* UART8 Receive */
+#define MCF_EDMA_CHAN_UART8_TX	35	/* UART8 Transmit */
+#define MCF_EDMA_CHAN_UART9_RX	36	/* UART9 Receive */
+#define MCF_EDMA_CHAN_UART9_TX	37	/* UART9 Transmit */
+#define MCF_EDMA_CHAN_OW	38	/* 1-Wire */
+#define MCF_EDMA_CHAN_RESERVED	39	/* Reserved */
+#define MCF_EDMA_CHAN_I2C4	40	/* I2C4 */
+#define MCF_EDMA_CHAN_I2C5	41	/* I2C5 */
+#define MCF_EDMA_CHAN_N2	42	/* Available for software */
+#define MCF_EDMA_CHAN_N3	43	/* Available for software */
+#define MCF_EDMA_CHAN_DSPI3_RX	44	/* DSPI3 Receive */
+#define MCF_EDMA_CHAN_DSPI3_TX	45	/* DSPI3 Transmit */
+#define MCF_EDMA_CHAN_SSI0_RX0	48	/* SSI0 Receive 0 */
+#define MCF_EDMA_CHAN_SSI0_RX1	49	/* SSI0 Receive 1 */
+#define MCF_EDMA_CHAN_SSI0_TX0	50	/* SSI0 Transmit 0 */
+#define MCF_EDMA_CHAN_SSI0_TX1	51	/* SSI0 Transmit 1 */
+#define MCF_EDMA_CHAN_SSI1_RX0	52	/* SSI1 Receive 0 */
+#define MCF_EDMA_CHAN_SSI1_RX1	53	/* SSI1 Receive 1 */
+#define MCF_EDMA_CHAN_SSI1_TX0	54	/* SSI1 Transmit 0 */
+#define MCF_EDMA_CHAN_SSI1_TX1	55	/* SSI1 Transmit 1 */
+#define MCF_EDMA_CHAN_PWM_CAP	56	/* PWM Capture */
+#define MCF_EDMA_CHAN_PWM_VAL	57	/* PWM Value */
+#define MCF_EDMA_CHAN_RESERVED2 58	/* Reserved */
+#define MCF_EDMA_CHAN_ESDHC	59	/* eSDHC */
+#define MCF_EDMA_CHAN_ADC0	60	/* ADC 0 */
+#define MCF_EDMA_CHAN_ADC1	61	/* ADC 1 */
+#define MCF_EDMA_CHAN_DAC0	62	/* DAC 0 */
+#define MCF_EDMA_CHAN_DAC1	63	/* DAC 1 */
+
+/* Register read/write macros */
+#define MCF_EDMA_CR                     MCF_REG32(0xFC044000)
+#define MCF_EDMA_ES                     MCF_REG32(0xFC044004)
+#define MCF_EDMA_ERQH                   MCF_REG32(0xFC044008)
+#define MCF_EDMA_ERQL                   MCF_REG32(0xFC04400C)
+#define MCF_EDMA_EEIH                   MCF_REG32(0xFC044010)
+#define MCF_EDMA_EEIL                   MCF_REG32(0xFC044014)
+#define MCF_EDMA_SERQ                   MCF_REG08(0xFC044018)
+#define MCF_EDMA_CERQ                   MCF_REG08(0xFC044019)
+#define MCF_EDMA_SEEI                   MCF_REG08(0xFC04401A)
+#define MCF_EDMA_CEEI                   MCF_REG08(0xFC04401B)
+#define MCF_EDMA_CINT                   MCF_REG08(0xFC04401C)
+#define MCF_EDMA_CERR                   MCF_REG08(0xFC04401D)
+#define MCF_EDMA_SSRT                   MCF_REG08(0xFC04401E)
+#define MCF_EDMA_CDNE                   MCF_REG08(0xFC04401F)
+#define MCF_EDMA_INTH			MCF_REG32(0xFC044020)
+#define MCF_EDMA_INTL			MCF_REG32(0xFC044024)
+#define MCF_EDMA_ERRH                   MCF_REG32(0xFC044028)
+#define MCF_EDMA_ERRL                   MCF_REG32(0xFC04402C)
+#define MCF_EDMA_RSH                    MCF_REG32(0xFC044030)
+#define MCF_EDMA_RSL                    MCF_REG32(0xFC044034)
+
+/* Parameterized register read/write macros for multiple registers */
+#define MCF_EDMA_DCHPRI(x)              MCF_REG08(0xFC044100+((x)*0x001))
+#define MCF_EDMA_TCD_SADDR(x)           MCF_REG32(0xFC045000+((x)*0x020))
+#define MCF_EDMA_TCD_ATTR(x)            MCF_REG16(0xFC045004+((x)*0x020))
+#define MCF_EDMA_TCD_SOFF(x)            MCF_REG16(0xFC045006+((x)*0x020))
+#define MCF_EDMA_TCD_NBYTES(x)          MCF_REG32(0xFC045008+((x)*0x020))
+#define MCF_EDMA_TCD_SLAST(x)           MCF_REG32(0xFC04500C+((x)*0x020))
+#define MCF_EDMA_TCD_DADDR(x)           MCF_REG32(0xFC045010+((x)*0x020))
+#define MCF_EDMA_TCD_CITER_ELINK(x)     MCF_REG16(0xFC045014+((x)*0x020))
+#define MCF_EDMA_TCD_CITER(x)           MCF_REG16(0xFC045014+((x)*0x020))
+#define MCF_EDMA_TCD_DOFF(x)            MCF_REG16(0xFC045016+((x)*0x020))
+#define MCF_EDMA_TCD_DLAST_SGA(x)       MCF_REG32(0xFC045018+((x)*0x020))
+#define MCF_EDMA_TCD_BITER_ELINK(x)     MCF_REG16(0xFC04501C+((x)*0x020))
+#define MCF_EDMA_TCD_BITER(x)           MCF_REG16(0xFC04501C+((x)*0x020))
+#define MCF_EDMA_TCD_CSR(x)             MCF_REG16((0xFC04501e)+((x)*0x020))
+
+/* Bit definitions and macros for CR */
+#define MCF_EDMA_CR_EDBG        (0x00000002)
+#define MCF_EDMA_CR_ERCA        (0x00000004)
+#define MCF_EDMA_CR_ERGA	(0x00000008)
+#define MCF_EDMA_CR_HOE		(0x00000010)
+#define MCF_EDMA_CR_HALT	(0x00000020)
+#define MCF_EDMA_CR_CLM		(0x00000040)
+#define MCF_EDMA_CR_EMLM	(0x00000080)
+#define MCF_EDMA_CR_GRP0PRI(x)	(((x)&0x03)<<8)
+#define MCF_EDMA_CR_GRP1PRI(x)	(((x)&0x03)<<10)
+#define MCF_EDMA_CR_GRP2PRI(x)	(((x)&0x03)<<12)
+#define MCF_EDMA_CR_GRP3PRI(x)	(((x)&0x03)<<14)
+#define MCF_EDMA_CR_ECX		(0x00010000)
+#define MCF_EDMA_CR_CX		(0x00020000)
+
+/* Bit definitions and macros for ES */
+#define MCF_EDMA_ES_DBE         (0x00000001)
+#define MCF_EDMA_ES_SBE         (0x00000002)
+#define MCF_EDMA_ES_SGE         (0x00000004)
+#define MCF_EDMA_ES_NCE         (0x00000008)
+#define MCF_EDMA_ES_DOE         (0x00000010)
+#define MCF_EDMA_ES_DAE         (0x00000020)
+#define MCF_EDMA_ES_SOE         (0x00000040)
+#define MCF_EDMA_ES_SAE         (0x00000080)
+#define MCF_EDMA_ES_ERRCHN(x)   (((x)&0x0000003F)<<8)
+#define MCF_EDMA_ES_CPE         (0x00004000)
+#define MCF_EDMA_ES_GPE         (0x00008000)
+#define MCF_EDMA_ES_ECX         (0x00010000)
+#define MCF_EDMA_ES_VLD         (0x80000000)
+
+/* Bit definitions and macros for ERQ: 0~63 bits */
+#define MCF_EDMA_ERQ_ERQH(x)	(0x01<<x)	/*32~63*/
+#define MCF_EDMA_ERQ_ERQL(x)	(0x01<<x)	/*0~31*/
+
+/* Bit definitions and macros for EEI: 0~63 bits */
+#define MCF_EDMA_EEI_EEIH(x)	(0x01<<x)	/*32~63*/
+#define MCF_EDMA_EEI_EEIL(x)	(0x01<<x)	/*0~31*/
+
+/* Bit definitions and macros for SERQ */
+#define MCF_EDMA_SERQ_SERQ(x)	(((x)&0x3F))
+#define MCF_EDMA_SERQ_SAER	(0x40)
+#define MCF_EDMA_SERQ_NOP	(0x80)
+
+/* Bit definitions and macros for CERQ */
+#define MCF_EDMA_CERQ_CERQ(x)	(((x)&0x3F))
+#define MCF_EDMA_CERQ_CAER	(0x40)
+#define MCF_EDMA_CERQ_NOP	(0x80)
+
+/* Bit definitions and macros for SEEI */
+#define MCF_EDMA_SEEI_SEEI(x)	(((x)&0x3F))
+#define MCF_EDMA_SEEI_SAEE	(0x40)
+#define MCF_EDMA_SEEI_NOP	(0x80)
+
+/* Bit definitions and macros for CEEI */
+#define MCF_EDMA_CEEI_CEEI(x)	(((x)&0x3F))
+#define MCF_EDMA_CEEI_CAEE	(0x40)
+#define MCF_EDMA_CEEI_NOP	(0x80)
+
+/* Bit definitions and macros for CINT */
+#define MCF_EDMA_CINT_CINT(x)	(((x)&0x3F))
+#define MCF_EDMA_CINT_CAIR	(0x40)
+#define MCF_EDMA_CINT_NOP	(0x80)
+
+/* Bit definitions and macros for CERR */
+#define MCF_EDMA_CERR_CERR(x)   (((x)&0x3F))
+#define MCF_EDMA_CERR_CAER      (0x40)
+#define MCF_EDMA_CERR_NOP	(0x80)
+
+/* Bit definitions and macros for SSRT */
+#define MCF_EDMA_SSRT_SSRT(x)   (((x)&0x3F))
+#define MCF_EDMA_SSRT_SAST      (0x40)
+#define MCF_EDMA_SSRT_NOP	(0x80)
+
+/* Bit definitions and macros for CDNE */
+#define MCF_EDMA_CDNE_CDNE(x)	(((x)&0x3F))
+#define MCF_EDMA_CDNE_CADN	(0x40)
+#define MCF_EDMA_CDNE_NOP	(0x80)
+
+/* Bit definitions and macros for INTR: 0~63 bits */
+#define MCF_EDMA_INTR_INTH(x)	(0x01<<x)	/*32~63*/
+#define MCF_EDMA_INTR_INTL(x)	(0x01<<x)	/*0~31*/
+
+/* Bit definitions and macros for ERR: 0~63 bits */
+#define MCF_EDMA_ERR_ERRH(x)	(0x01<<x)	/*32~63*/
+#define MCF_EDMA_ERR_ERRL(x)	(0x01<<x)	/*0~31*/
+
+/* Bit defineitions and macros for HRSH/HRSL */
+#define MCF_EDMA_HRS_HRSH(x)	(0x01<<x)	/*32~63*/
+#define MCF_EDMA_HRS_HRSL(x)	(0x01<<x)	/*0~31*/
+
+/* Bit definitions and macros for DCHPRI group */
+#define MCF_EDMA_DCHPRI_CHPRI(x)	(((x)&0x0F))
+#define MCF_EDMA_DCHPRI_GRPPRI(x)	(((x)&0x03) << 4)
+#define MCF_EDMA_DCHPRI_DPA		(0x40)
+#define MCF_EDMA_DCHPRI_ECP		(0x80)
+
+/* Bit definitions and macros for TCD_SADDR group */
+#define MCF_EDMA_TCD_SADDR_SADDR(x)     (x)
+
+/* Bit definitions and macros for TCD_ATTR group */
+#define MCF_EDMA_TCD_ATTR_DSIZE(x)          (((x)&0x0007))
+#define MCF_EDMA_TCD_ATTR_DMOD(x)           (((x)&0x001F)<<3)
+#define MCF_EDMA_TCD_ATTR_SSIZE(x)          (((x)&0x0007)<<8)
+#define MCF_EDMA_TCD_ATTR_SMOD(x)           (((x)&0x001F)<<11)
+#define MCF_EDMA_TCD_ATTR_SSIZE_8BIT        (0x0000)
+#define MCF_EDMA_TCD_ATTR_SSIZE_16BIT       (0x0100)
+#define MCF_EDMA_TCD_ATTR_SSIZE_32BIT       (0x0200)
+#define MCF_EDMA_TCD_ATTR_SSIZE_16BYTE      (0x0400)
+#define MCF_EDMA_TCD_ATTR_DSIZE_8BIT        (0x0000)
+#define MCF_EDMA_TCD_ATTR_DSIZE_16BIT       (0x0001)
+#define MCF_EDMA_TCD_ATTR_DSIZE_32BIT       (0x0002)
+#define MCF_EDMA_TCD_ATTR_DSIZE_16BYTE      (0x0004)
+
+/* Bit definitions and macros for TCD_SOFF group */
+#define MCF_EDMA_TCD_SOFF_SOFF(x)   (x)
+
+/* Bit definitions and macros for TCD_NBYTES group */
+#define MCF_EDMA_TCD_NBYTES_NBYTES(x)   (x)
+#define MCF_EDMA_TCD_NBYTES_SMLOE	(0x80000000)
+#define MCF_EDMA_TCD_NBYTES_DMLOE	(0x40000000)
+#define MCF_EDMA_TCD_NBYTES_MLOFF(x)	(((x)&0xFFFFF)<<20)
+#define MCF_EDMA_TCD_NBYTES_9BITS	((x)&0x1FF)
+
+/* Bit definitions and macros for TCD_SLAST group */
+#define MCF_EDMA_TCD_SLAST_SLAST(x)     (x)
+
+/* Bit definitions and macros for TCD_DADDR group */
+#define MCF_EDMA_TCD_DADDR_DADDR(x)     (x)
+
+/* Bit definitions and macros for TCD_CITER_ELINK group */
+#define MCF_EDMA_TCD_CITER_ELINK_CITER(x)       (((x)&0x01FF))
+#define MCF_EDMA_TCD_CITER_ELINK_LINKCH(x)      (((x)&0x003F)<<9)
+#define MCF_EDMA_TCD_CITER_ELINK_E_LINK         (0x8000)
+
+/* Bit definitions and macros for TCD_CITER group */
+#define MCF_EDMA_TCD_CITER_CITER(x)     (((x)&0x7FFF))
+#define MCF_EDMA_TCD_CITER_E_LINK       (0x8000)
+
+/* Bit definitions and macros for TCD_DOFF group */
+#define MCF_EDMA_TCD_DOFF_DOFF(x)   (x)
+
+/* Bit definitions and macros for TCD_DLAST_SGA group */
+#define MCF_EDMA_TCD_DLAST_SGA_DLAST_SGA(x)     (x)
+
+/* Bit definitions and macros for TCD_BITER_ELINK group */
+#define MCF_EDMA_TCD_BITER_ELINK_BITER(x)       (((x)&0x01FF))
+#define MCF_EDMA_TCD_BITER_ELINK_LINKCH(x)      (((x)&0x003F)<<9)
+#define MCF_EDMA_TCD_BITER_ELINK_E_LINK         (0x8000)
+
+/* Bit definitions and macros for TCD_BITER group */
+#define MCF_EDMA_TCD_BITER_BITER(x)     (((x)&0x7FFF))
+#define MCF_EDMA_TCD_BITER_E_LINK       (0x8000)
+
+/* Bit definitions and macros for TCD_CSR group */
+#define MCF_EDMA_TCD_CSR_START              (0x0001)
+#define MCF_EDMA_TCD_CSR_INT_MAJOR          (0x0002)
+#define MCF_EDMA_TCD_CSR_INT_HALF           (0x0004)
+#define MCF_EDMA_TCD_CSR_D_REQ              (0x0008)
+#define MCF_EDMA_TCD_CSR_E_SG               (0x0010)
+#define MCF_EDMA_TCD_CSR_E_LINK             (0x0020)
+#define MCF_EDMA_TCD_CSR_ACTIVE             (0x0040)
+#define MCF_EDMA_TCD_CSR_DONE               (0x0080)
+#define MCF_EDMA_TCD_CSR_LINKCH(x)          (((x)&0x003F)<<8)
+#define MCF_EDMA_TCD_CSR_BWC(x)             (((x)&0x0003)<<14)
+#define MCF_EDMA_TCD_CSR_BWC_NO_STALL       (0x0000)
+#define MCF_EDMA_TCD_CSR_BWC_4CYC_STALL     (0x8000)
+#define MCF_EDMA_TCD_CSR_BWC_8CYC_STALL     (0xC000)
+
+/* Bit definitions and macros for TCD0_CSR */
+#define MCF_EDMA_TCD0_CSR_START             (0x0001)
+#define MCF_EDMA_TCD0_CSR_INT_MAJOR         (0x0002)
+#define MCF_EDMA_TCD0_CSR_INT_HALF          (0x0004)
+#define MCF_EDMA_TCD0_CSR_D_REQ             (0x0008)
+#define MCF_EDMA_TCD0_CSR_E_SG              (0x0010)
+#define MCF_EDMA_TCD0_CSR_E_LINK            (0x0020)
+#define MCF_EDMA_TCD0_CSR_ACTIVE            (0x0040)
+#define MCF_EDMA_TCD0_CSR_DONE              (0x0080)
+#define MCF_EDMA_TCD0_CSR_LINKCH(x)         (((x)&0x003F)<<8)
+#define MCF_EDMA_TCD0_CSR_BWC(x)            (((x)&0x0003)<<14)
+#define MCF_EDMA_TCD0_CSR_BWC_NO_STALL      (0x0000)
+#define MCF_EDMA_TCD0_CSR_BWC_4CYC_STALL    (0x8000)
+#define MCF_EDMA_TCD0_CSR_BWC_8CYC_STALL    (0xC000)
+
+#endif /* __MCF5441X_EDMA_H__ */
diff --git a/arch/m68k/include/asm/mcf_edma.h b/arch/m68k/include/asm/mcf_edma.h
index f2dbc51..cc4450a 100755
--- a/arch/m68k/include/asm/mcf_edma.h
+++ b/arch/m68k/include/asm/mcf_edma.h
@@ -1,7 +1,9 @@
  /*
   * mcf_edma.h - Coldfire eDMA driver header file.
   *
-  * Copyright 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+  * Copyright 2008-2010 Freescale Semiconductor, Inc. All Rights Reserved.
+  *
+  *  Add support for m5441x platform (Lanttor.Guo@freescale.com)
   *
   * This program is free software; you can redistribute  it and/or modify it
   * under  the terms of  the GNU General  Public License as published by the
@@ -16,14 +18,41 @@
 #include <linux/interrupt.h>
 #if defined(CONFIG_M5445X)
 #include <asm/mcf5445x_edma.h>
+#elif defined(CONFIG_M5441X)
+#include <asm/mcf5441x_edma.h>
 #endif
 #include <linux/scatterlist.h>
 
-#define MCF_EDMA_INT_CHANNEL_BASE 	(8)
-#define MCF_EDMA_INT_CONTROLLER_BASE 	(64)
-#define MCF_EDMA_INT_BASE		(MCF_EDMA_INT_CHANNEL_BASE + \
-					 MCF_EDMA_INT_CONTROLLER_BASE)
+#define MCF_EDMA_INT0_CHANNEL_BASE 	(8)
+#define MCF_EDMA_INT0_CONTROLLER_BASE 	(64)
+#define MCF_EDMA_INT0_BASE		(MCF_EDMA_INT0_CHANNEL_BASE + \
+					 MCF_EDMA_INT0_CONTROLLER_BASE)
+#define MCF_EDMA_INT0_NUM		(16)
+#define MCF_EDMA_INT0_END		(MCF_EDMA_INT0_NUM)
+
+#if defined (CONFIG_M5441X)
+#define MCF_EDMA_INT1_CHANNEL_BASE 	(8)
+#define MCF_EDMA_INT1_CONTROLLER_BASE	(128)
+#define MCF_EDMA_INT1_BASE		(MCF_EDMA_INT1_CHANNEL_BASE + \
+					 MCF_EDMA_INT1_CONTROLLER_BASE)
+#define MCF_EDMA_INT1_NUM		(40)
+#define MCF_EDMA_INT1_END		(MCF_EDMA_INT0_END + MCF_EDMA_INT1_NUM)
+
+#define MCF_EDMA_INT2_CHANNEL_BASE 	(0)
+#define MCF_EDMA_INT2_CONTROLLER_BASE	(192)
+#define MCF_EDMA_INT2_BASE		(MCF_EDMA_INT2_CHANNEL_BASE + \
+					 MCF_EDMA_INT2_CONTROLLER_BASE)
+#define MCF_EDMA_INT2_NUM		(8)
+#define MCF_EDMA_INT2_END		(MCF_EDMA_INT1_END + MCF_EDMA_INT2_NUM)
+
+#endif
+
+#if defined (CONFIG_M5445X)
 #define MCF_EDMA_CHANNELS		(16)	/* 0-15 */
+#elif defined (CONFIG_M5441X)
+#define MCF_EDMA_CHANNELS		(64)	/* 0-63 */
+#endif
+
 #define MCF_EDMA_CHANNEL_ANY		(0xFF)
 #define MCF_EDMA_INT_ERR		(16)	/* edma error interrupt */
 
diff --git a/drivers/dma/Kconfig b/drivers/dma/Kconfig
index fce2727..b7eaa7e 100644
--- a/drivers/dma/Kconfig
+++ b/drivers/dma/Kconfig
@@ -58,7 +58,7 @@ config FSL_DMA
 config COLDFIRE_EDMA
 	tristate "Coldfire eDMA support"
 	default y
-	depends on COLDFIRE && M5445X
+	depends on COLDFIRE && (M5445X || M5441X)
 	help
 	  Enable support for Coldfire eDMA controller. For example
 	  used by Coldfire SSI Audio device driver.
diff --git a/drivers/dma/mcf_edma.c b/drivers/dma/mcf_edma.c
index 106c510..4a6b94f 100755
--- a/drivers/dma/mcf_edma.c
+++ b/drivers/dma/mcf_edma.c
@@ -1,10 +1,11 @@
  /*
   * mcf_edma.c - eDMA driver for Coldfire.
   *
-  * Copyright 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+  * Copyright 2008-2010 Freescale Semiconductor, Inc. All Rights Reserved.
   * Author: Andrey Butok
   *         Yaroslav Vinogradov
-  *
+  *         Lanttor.Guo@freescale.com add  m5441x platform support.
+  *		
   * This program is free software; you can redistribute  it and/or modify it
   * under  the terms of  the GNU General  Public License as published by the
   * Free Software Foundation;  either version 2 of the  License, or (at your
@@ -48,7 +49,7 @@
 #include <linux/proc_fs.h>
 
 /* Please add here processors that were tested with this driver */
-#if !defined(CONFIG_M5227x) && !defined(CONFIG_M5445X)
+#if !defined(CONFIG_M5227x) && !defined(CONFIG_M5445X) && !defined(CONFIG_M5441X)
 #error "The driver is not tested/designed for your processor!"
 #endif
 
@@ -83,6 +84,12 @@ u8 mcf_edma_channel_pool[] = { 1,	/* Not used */
 	6,			/* UART1 Transmit */
 	7,			/* UART2 Receive */
 	8,			/* UART2 Transmit */
+#if defined(CONFIG_M5441X)
+	16,
+	55,
+	56,
+	63,
+#endif
 };
 
 /*
@@ -132,10 +139,35 @@ const struct file_operations mcf_edma_fops = {
 static int
 mcf_edma_isr(int irq, void *dev_id)
 {
-	int channel =
-	    irq - MCF_EDMA_INT_CONTROLLER_BASE - MCF_EDMA_INT_CHANNEL_BASE;
+	int channel = -1;
 	int result = IRQ_HANDLED;
 
+#if defined(CONFIG_M5445X)
+	channel = irq - MCF_EDMA_INT0_BASE;
+#elif defined(CONFIG_M5441X)
+	if (irq >= MCF_EDMA_INT0_BASE &&
+	    irq < MCF_EDMA_INT0_BASE + MCF_EDMA_INT0_NUM)
+		channel = irq - MCF_EDMA_INT0_BASE;
+	else if (irq >= MCF_EDMA_INT1_BASE &&
+		 irq < MCF_EDMA_INT1_BASE + MCF_EDMA_INT1_NUM)
+		channel = irq - MCF_EDMA_INT1_BASE + MCF_EDMA_INT0_END;
+	else if (irq == MCF_EDMA_INT2_BASE &&
+		 irq < MCF_EDMA_INT2_BASE + MCF_EDMA_INT2_NUM) {
+		int i;
+		for (i = 0; i < MCF_EDMA_INT2_NUM; i++) {
+			if ((MCF_EDMA_INTH >> 24) & (0x1 << i)) {
+				channel = irq - MCF_EDMA_INT2_BASE +
+					  MCF_EDMA_INT1_END + i;
+				break;
+			}
+		}
+	}
+	else {
+		ERR("Bad irq number at isr!\n" );
+		return result;
+	}
+#endif
+
 	DBG("\n");
 
 	if ((mcf_edma_devp != NULL) &&
@@ -171,9 +203,11 @@ mcf_edma_isr(int irq, void *dev_id)
 static int
 mcf_edma_error_isr(int irq, void *dev_id)
 {
-	u16 err;
 	int i;
 
+#if defined(CONFIG_M5445X)
+	u16 err;
+
 	err = MCF_EDMA_ERR;
 	for (i = 0; i < MCF_EDMA_CHANNELS; i++) {
 		if (err & (1 << i)) {
@@ -189,7 +223,28 @@ mcf_edma_error_isr(int irq, void *dev_id)
 				ERR(" DMA error on channel (%d)\n", i);
 		}
 	}
+#elif defined(CONFIG_M5441X)
+	u32 errl, errh;
+
+	errl = MCF_EDMA_ERRL;
+	errh = MCF_EDMA_ERRH;
+
+	        for (i = 0; i < MCF_EDMA_CHANNELS; i++) {
+                if ((errl & (1 << i)) || (errh & (1 << (i -32)))) {
+                        if (mcf_edma_devp != NULL &&
+                            mcf_edma_devp->dma_interrupt_handlers[i].
+                            error_handler)
+                                mcf_edma_devp->dma_interrupt_handlers[i].
+                                    error_handler(i,
+                                                  mcf_edma_devp->
+                                                  dma_interrupt_handlers[i].
+                                                  arg);
+                        else
+                                ERR(" DMA error on channel (%d)\n", i);
+                }
+        }
 
+#endif
 	MCF_EDMA_CERR = MCF_EDMA_CERR_CAER;
 	return IRQ_HANDLED;
 }
@@ -532,9 +587,27 @@ mcf_edma_request_channel(int channel,
 		    device_id;
 
 		/* Initalize interrupt controller to allow eDMA interrupts */
-		MCF_INTC0_ICR(MCF_EDMA_INT_CHANNEL_BASE + channel) = irq_level;
-		MCF_INTC0_CIMR = MCF_EDMA_INT_CHANNEL_BASE + channel;
-
+#if defined (CONFIG_M5445X)
+		MCF_INTC0_ICR(MCF_EDMA_INT0_CHANNEL_BASE + channel) = irq_level;
+		MCF_INTC0_CIMR = MCF_EDMA_INT0_CHANNEL_BASE + channel;
+#elif defined (CONFIG_M5441X)
+		if (channel >= 0 && channel < MCF_EDMA_INT0_END) {
+			MCF_INTC0_ICR(MCF_EDMA_INT0_CHANNEL_BASE + channel) =
+				irq_level;
+			MCF_INTC0_CIMR = MCF_EDMA_INT0_CHANNEL_BASE + channel;
+		} else if (channel >= MCF_EDMA_INT0_END &&
+			   channel < MCF_EDMA_INT1_END) {
+			MCF_INTC1_ICR(MCF_EDMA_INT1_CHANNEL_BASE +
+				(channel - MCF_EDMA_INT0_END)) = irq_level;
+                        MCF_INTC1_CIMR = MCF_EDMA_INT1_CHANNEL_BASE +
+				(channel - MCF_EDMA_INT0_END);
+		} else if (channel >= MCF_EDMA_INT1_END &&
+			   channel < MCF_EDMA_INT2_END) {
+			MCF_INTC2_ICR(MCF_EDMA_INT2_CHANNEL_BASE) = irq_level;
+			MCF_INTC2_CIMR = MCF_EDMA_INT2_CHANNEL_BASE;
+		} else
+			ERR("Bad channel number!\n");
+#endif
 		return channel;
 	}
 	return -EINVAL;
@@ -629,10 +702,29 @@ mcf_edma_cleanup(void)
 
 	/* free interrupts/memory */
 	if (mcf_edma_devp) {
-		for (i = 0; i < MCF_EDMA_CHANNELS; i++)
-			free_irq(MCF_EDMA_INT_BASE + i, mcf_edma_devp);
+		for (i = 0; i < MCF_EDMA_CHANNELS; i++) {
+		#if defined(CONFIG_M5445X)
+			free_irq(MCF_EDMA_INT0_BASE + i, mcf_edma_devp);
+		#elif defined(CONFIG_M5441X)
+			if (i >= 0 && i < MCF_EDMA_INT0_END)
+				free_irq(MCF_EDMA_INT0_BASE + i, mcf_edma_devp);
+			else if (i >= MCF_EDMA_INT0_END &&
+				 i <= MCF_EDMA_INT1_END)
+				free_irq(MCF_EDMA_INT1_BASE +
+				 (i - MCF_EDMA_INT0_END), mcf_edma_devp);
+			else if (i >=MCF_EDMA_INT1_END &&
+				 i < MCF_EDMA_INT2_END) {
+				free_irq(MCF_EDMA_INT2_BASE, mcf_edma_devp);
+				break;
+			}
+			else {
+				ERR("Bad irq number!\n");
+				return;
+			}
+		#endif
+		}
 
-		free_irq(MCF_EDMA_INT_BASE + MCF_EDMA_INT_ERR, mcf_edma_devp);
+		free_irq(MCF_EDMA_INT0_BASE + MCF_EDMA_INT_ERR, mcf_edma_devp);
 		cdev_del(&mcf_edma_devp->cdev);
 		kfree(mcf_edma_devp);
 	}
@@ -753,7 +845,17 @@ mcf_edma_init(void)
 	dev_t dev;
 	int result;
 	int i;
+#ifdef CONFIG_M54455
 	u32 offset;
+#endif
+
+#if defined(CONFIG_M5441X)
+	/* edma group priority, default grp0 > grp1 > grp2 > grp3 */
+	u32 grp0_pri = MCF_EDMA_CR_GRP0PRI(0x00);
+	u32 grp1_pri = MCF_EDMA_CR_GRP1PRI(0x01);
+	u32 grp2_pri = MCF_EDMA_CR_GRP2PRI(0x02);
+	u32 grp3_pri = MCF_EDMA_CR_GRP3PRI(0x03);
+#endif
 
 	DBG("Entry\n");
 
@@ -796,30 +898,84 @@ mcf_edma_init(void)
 	}
 
 	/* request/enable irq for each eDMA channel */
+#if defined (CONFIG_M5445X)
 	for (i = 0; i < MCF_EDMA_CHANNELS; i++) {
-		result = request_irq(MCF_EDMA_INT_BASE + i,
+		result = request_irq(MCF_EDMA_INT0_BASE + i,
 				     mcf_edma_isr, IRQF_DISABLED,
 				     MCF_EDMA_DRIVER_NAME, mcf_edma_devp);
 		if (result) {
 			ERR("Cannot request irq %d\n",
-			    (MCF_EDMA_INT_BASE + i));
+			     (MCF_EDMA_INT0_BASE + i));
+			result = -EBUSY;
+			goto fail;
+		}
+	}
+#elif defined (CONFIG_M5441X)
+	for (i = 0; i < MCF_EDMA_CHANNELS; i++) {
+		if (i >= 0 && i < MCF_EDMA_INT0_END) {
+			result = request_irq(MCF_EDMA_INT0_BASE + i,
+					     mcf_edma_isr, IRQF_DISABLED,
+					     MCF_EDMA_DRIVER_NAME,
+					     mcf_edma_devp);
+
+			if (result) {
+				ERR("Cannot request irq %d\n",
+				     (MCF_EDMA_INT0_BASE + i));
+				result = -EBUSY;
+				goto fail;
+			}
+		} else if (i >= MCF_EDMA_INT0_END && i < MCF_EDMA_INT1_END) {
+			result = request_irq(MCF_EDMA_INT1_BASE +
+					     (i - MCF_EDMA_INT0_END),
+					     mcf_edma_isr, IRQF_DISABLED,
+					     MCF_EDMA_DRIVER_NAME,
+					     mcf_edma_devp);
+
+			if (result) {
+				ERR("Cannot request irq %d\n",
+				    (MCF_EDMA_INT1_BASE +
+				    (i - MCF_EDMA_INT0_END)));
+				result = -EBUSY;
+				goto fail;
+			}
+		} else if (i >= MCF_EDMA_INT1_END && MCF_EDMA_INT2_END) {
+			result = request_irq(MCF_EDMA_INT2_BASE,
+					     mcf_edma_isr, IRQF_DISABLED,
+					     MCF_EDMA_DRIVER_NAME,
+					     mcf_edma_devp);
+			if (result) {
+				ERR("Cannot request irq %d\n",
+				    MCF_EDMA_INT2_BASE );
+				result = -EBUSY;
+				goto fail;
+			}
+			break;
+		} else {
+			ERR(" Cannot request irq because of wrong number!\n");
 			result = -EBUSY;
 			goto fail;
 		}
 	}
+#endif
 
 	/* request error interrupt */
-	result = request_irq(MCF_EDMA_INT_BASE + MCF_EDMA_INT_ERR,
+	result = request_irq(MCF_EDMA_INT0_BASE + MCF_EDMA_INT_ERR,
 			     mcf_edma_error_isr, IRQF_DISABLED,
 			     MCF_EDMA_DRIVER_NAME, mcf_edma_devp);
 	if (result) {
 		ERR("Cannot request irq %d\n",
-		    (MCF_EDMA_INT_BASE + MCF_EDMA_INT_ERR));
+		    (MCF_EDMA_INT0_BASE + MCF_EDMA_INT_ERR));
 		result = -EBUSY;
 		goto fail;
 	}
 
+#if defined(CONFIG_M5445X)
 	MCF_EDMA_CR = 0;
+#elif defined(CONFIG_M5441X)
+	MCF_EDMA_CR = (0 | grp0_pri | grp1_pri | grp2_pri | grp3_pri);
+	DBG("MCF_EDMA_CR = %lx\n", MCF_EDMA_CR);
+#endif
+
 #ifdef CONFIG_M54455
 	fsl_pata_dma_tcd.pata_tcd_va = (struct TCD *) dma_alloc_coherent(NULL,
 			MCF_EDMA_TCD_PER_CHAN + 1,
diff --git a/drivers/dma/mcf_edma_test.c b/drivers/dma/mcf_edma_test.c
index 3c866fc..8830d98 100644
--- a/drivers/dma/mcf_edma_test.c
+++ b/drivers/dma/mcf_edma_test.c
@@ -1,7 +1,7 @@
  /*
   * mcf_edma_test.c - simple test/example module for Coldfire eDMA.
   *
-  * Copyright 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+  * Copyright 2008-2010 Freescale Semiconductor, Inc. All Rights Reserved.
   * Author: Andrey Butok
   *
   * This program is free software; you can redistribute  it and/or modify it
@@ -123,7 +123,8 @@ mcf_edma_test_run(void)
 	u8 *dest_address;
 	u32 test_data;
 	int channel;
-	u32 allocated_channels = 0;
+	u32 allocated_channels_low = 0;
+	u32 allocated_channels_high = 0;
 
 	printk(KERN_INFO "\n===============================================\n");
 	printk(KERN_INFO "\nStarting eDMA transfer test!\n");
@@ -162,7 +163,10 @@ mcf_edma_test_run(void)
 			goto test_end;
 
 
-		allocated_channels |= (1 << channel);
+		if (channel >=0 && channel < 32)
+			allocated_channels_low |= (1 << channel);
+		else if (channel >=32 && channel < 64)
+			allocated_channels_high |= (1 << (channel - 32 ));
 
 		/* Initialize data for DMA to move */
 		for (j = 0; j < byte_count; j = j + 4) {
@@ -230,7 +234,8 @@ test_end:
 	printk(KERN_INFO
 		"It has been automatically allocated %d eDMA channels:\n", i);
 	for (i = 0; i < MCF_EDMA_CHANNELS; i++) {
-		if (allocated_channels & (1 << i)) {
+		if ((allocated_channels_low & (1 << i)) ||
+		    (allocated_channels_high & (1 << (i - 32)))) {
 			printk(KERN_INFO "%d,\n", i);
 			mcf_edma_free_channel(i, NULL);
 		}
-- 
1.6.4

