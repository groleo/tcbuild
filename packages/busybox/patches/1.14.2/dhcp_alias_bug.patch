--- a/networking/udhcp/socket.c	2009-06-22 01:40:29.000000000 +0300
+++ b/networking/udhcp/socket.c	2010-02-04 14:17:43.000000000 +0200
@@ -83,6 +83,24 @@
 	return 0;
 }
 
+/*Addeed by Gabriel Ghervase - fixup for binding to aliased interfaces*/
+	static int get_iface_list(struct ifconf *ifconf)
+	{
+		int sock, rval;
+
+		sock = socket(AF_INET,SOCK_STREAM,0);
+		if(sock < 0)
+			return (-1);
+
+		if((rval = ioctl(sock, SIOCGIFCONF , (char*) ifconf  )) < 0 )
+			return (-1);
+			
+		close(sock);
+
+		return rval;
+	}
+/**/
+
 /* 1. None of the callers expects it to ever fail */
 /* 2. ip was always INADDR_ANY */
 int FAST_FUNC udhcp_listen_socket(/*uint32_t ip,*/ int port, const char *inf)
@@ -97,10 +115,41 @@
 	if (setsockopt_broadcast(fd) == -1)
 		bb_perror_msg_and_die("SO_BROADCAST");
 
+	/*Added by Gabriel Ghervase - fixup for binding to aliased interfaces*/
+		
+		if ( strchr(inf, ':') != NULL)
+		{	struct ifreq ifreqs[20];
+			struct ifconf ifconf;
+			int  nifaces, i;
+	
+			memset(&ifconf,0,sizeof(ifconf));
+			ifconf.ifc_buf = (char*) (ifreqs);
+			ifconf.ifc_len = sizeof(ifreqs);		
+
+			if(get_iface_list(&ifconf) < 0) 
+			{	DEBUG("Could not get interfaces list");
+				xfunc_die();
+			}
+
+			nifaces =  ifconf.ifc_len/sizeof(struct ifreq);
+
+			for(i = 0; i < nifaces; i++)
+			{	if ( strcmp(ifreqs[i].ifr_name, inf) ) continue;
+				memcpy(&addr, &(ifreqs[i].ifr_addr), sizeof(struct sockaddr));
+				break;
+			}
+			addr.sin_port = htons(port);
+			addr.sin_family = AF_INET;
+			xbind(fd, (struct sockaddr *)&addr, sizeof(addr));
+			
+			return fd;
+		}
+	/**/
+	
 	/* NB: bug 1032 says this doesn't work on ethernet aliases (ethN:M) */
 	if (setsockopt_bindtodevice(fd, inf))
 		xfunc_die(); /* warning is already printed */
-
+	
 	memset(&addr, 0, sizeof(addr));
 	addr.sin_family = AF_INET;
 	addr.sin_port = htons(port);
